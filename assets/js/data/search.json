[ { "title": "Javascript를 어떻게 다뤄볼 수 있을까?", "url": "/posts/Try-Using-JS/", "categories": "javascript", "tags": "javascript, study", "date": "2021-11-01 21:03:00 +0900", "snippet": "HTML과 CSS 그리고 JAVASCRIPTHTML 사용해보기CSS 사용해보기두서안녕하세요. Dodev 하다입니다. CSS 다음으로는 말씀드렸듯 javascript(JS)입니다.다시한번 말하자면, HTML은 웹페이지를 만들기 위한 Markup언어입니다. 하지만 html로만 작성된 웹 페이지는 예쁘지 않으며 어떠한 이벤트를 걸어주거나, 동적 페이지로 작동하게 하는것은 어렵습니다.그래서 CSS를 이용해 웹 페이지의 디자인을 입히고, javascript를 이용해 여러가지 작업을 할 수 있습니다.1995년에 javascript가 발표 된 뒤, 2015년부터 지속적으로 기능이 확장되어 매년 6월에 새규격이 나옵니다.javascript 버전을 살펴보면 ECMS Script와 ES라는 걸 보실 수 있는데요,사실상 둘 다 동일합니다. 정식명칭이 ECMS Script, 그에따른 별칭이 ES입니다. ECMS Script2015 == ES6 ECMS Script2016 == ES7 ECMS Script2017 == ES8 ECMS Script2018 == ES9 ECMS Script2019 == ES10 ECMS Script2020 == ES11 ECMS Script2021 == ES12html은 markup언어, css는 style sheet언어 그리고 마지막으로 javascript는 객체기반의 스크립트 언어입니다. 드디어 프로그래밍 언어가 나왔습니다.JavaScript 란?JavaScript는 객체기반의 스크립트 언어입니다. 약칭으로 JS라고 부르기도 합니다. 이름에 JAVA가 붙어있고, 객체지향 언어라 썬 마이크로사.. 현재에는 오라클과 인수합병되어 오라클의 JAVA와 연관이 있는것으로 아는분이 많으신데, 사실 이름에만 JAVA가 들어갈 뿐 연관성은 없답니다.JavaScript를 이용해 HTML에서 다양한 일을 할 수 있습니다. HTML 및 CSS의 요소를 읽고 변경하며, 이외에도 다양한 동작을 실행 할 수 있습니다. 드디어 정리가 되었습니다! HTML : 웹 페이지 뼈대 정의(콘텐츠) CSS : 웹 페이지의 디자인 정의(스타일 및 레이아웃) JavaScript : 웹페이지의 동작 정의(동작)이 정도만 아셔도 사용하는데에는 무리가 없습니다!이제는 JS사용법에 관해서 알아볼 차례이지요, 하지만…포스팅을 작성하기 전 엄청나게 고민을 많이 했습니다만, 결정을 하지 못하다가 포스팅을 작성하면서 결심하게 되었습니다.JS는 프로그래밍 언어입니다. 변수, 연산자, 배열.. 함수, 메소드… 엄청나게 방대한 양을 자랑합니다. 도대체 저게 무엇인지, 어떻게 사용하는지 한번에 알고싶다! 하실테지만유감스럽게도 저는 한 포스팅에서 JS를 다룰 깜냥은 되지 못하는것 같습니다.그래서 하나씩, 실제로 웹 페이지를 작성하면서 다루려고 합니다.그렇기에 이후 내용은 작성하지 않도록 하겠습니다.대신 웹 페이지를 작성하기 위한 준비작업을 하려고 합니다.에디터(편집기)HTML 사용해보기 - HTML 에디터(편집기)를 참고부탁드립니다.에디터는 어느것을 사용하여도 됩니다만, 저는 VSCode를 사용합니다. 필요시에 따라 Visual Studio를 사용하기도 하나, 포스팅에서는 VSCode를 이용하도록 하겠습니다.VSCode가 없으신 경우 VSCode를 다운로드 링크버튼을 클릭해 다운로드 부탁드리겠습니다.에디터(편집기)만 설치해주셨다면 준비는 끝입니다.프로젝트를 생성하고, html, css 및 js를 이용해서 간단한 페이지들을 만들어보도록하겠습니다.많이 부족함에 죄송하고, 앞으로 열심히 작성해보겠습니다.정말 짧은 포스팅이네요.감사합니다." }, { "title": "CSS 사용해보기", "url": "/posts/Try-Using-CSS/", "categories": "css", "tags": "css, study", "date": "2021-10-30 09:09:00 +0900", "snippet": "HTML과 CSS 그리고 JAVASCRIPTHTML 사용해보기Javascript를 어떻게 다뤄볼 수 있을까?두서안녕하세요. Dodev 하다입니다. HTML을 어느정도 알았다면, 이후로는 CSS와 javascript에 관해서 시작해야합니다.그 중, 우선 CSS 먼저 살펴보도록 할까요?HTML은 웹페이지를 만들기 위한 Markup언어입니다. 하지만 html로만 작성된 웹 페이지는 예쁘지 않으며 어떠한 이벤트를 걸어주거나, 동적 페이지로 작동하게 하는것은 어렵습니다.그래서 CSS를 이용해 웹 페이지의 디자인을 입히고, javascript를 이용해 여러가지 작업을 할 수 있습니다.JS 또한 이후 다룰 예정입니다만, 먼저 CSS를 보도록 하겠습니다.1996년에 CSS 1이 처음으로 도입되었고 현재 CSS 3을 대부분 사용중입니다. 사실 CSS 4도 개념적으로 존재하긴 하지만 대게 사용하지않습니다.1998년 CSS 2가 발표되었으며, 표준은 CSS 2.1을 따릅니다.현재 사용되는 CSS 3도 자세히 들여다보면 CSS 2.1의 확장이라고도 할 수 있습니다.html은 markup언어, css는 style sheet언어입니다.좀 더 알아볼까요?CSS란?CSS는 Cascading Style Sheets의 약자로, 웹 페이지를 꾸미는데에 사용되는 Style Sheet 언어입니다.CSS를 이용해 HTML에서 뼈대와 디자인요소를 분리할 수 있습니다. 분리하지 않은 CSS는 작성시에 편리하지만, 이후 수정 또는 삭제시 문제를 일으킬 수 있습니다.또한, 반응형 웹에서 CSS가 활용됩니다.깔끔하게 정의해볼까요? 다음과 같습니다. HTML : 웹 페이지 뼈대 정의(콘텐츠) CSS : 웹 페이지의 디자인 정의(스타일 및 레이아웃)이제 사용해보도록 하겠습니다!에디터(편집기)HTML 사용해보기 - HTML 에디터(편집기)를 참고부탁드립니다.에디터는 어느것을 사용하여도 됩니다만, 저는 VSCode를 사용합니다. 필요시에 따라 Visual Studio를 사용하기도 하나, 포스팅에서는 VSCode를 이용하도록 하겠습니다.VSCode가 없으신 경우 VSCode를 다운로드 링크버튼을 클릭해 다운로드 부탁드리겠습니다.CSS 기본먼저 시작 전, 기본적인 단어들을 알아보도록 하겠습니다. 전체 구조 : rule set이라고 합니다 선택자(selector) : HTML의 요소 이름입니다. html요소, id, class등 어떤것을 꾸밀지 선택합니다. 속성(property) : 선택자로 선택된 요소를 꾸미는 방법입니다. rule 안에서 여러가지 속성이 사용 될 수 있습니다. 속성은 반드시 속성 값을 가집니다. 속성 값(property value) : 속성의 값입니다. 선언(declaration) : 속성과 속성값을 아우릅니다. 각 선언들은 세미콜론(;)으로 구분됩니다 주석(comment) : 한줄주석은 //, 여러줄 주석은 /*주석입니다*/의 형식으로, 코드에는 영향을 주지 않는 Comment입니다.아래 이미지를 참고하면 쉽게 이해하실 수 있습니다.선택자, 속성, 값은 여러가지가 존재합니다. 이미지와 같이 중첩으로도 사용할 수 도 있습니다.이번에도 순서대로 알아봅시다!CSS 적용 방법HTML - 많이 사용되는 태그 28선 - style태그에서 기술하였으나, 동일하게 한번 더 작성하도록 하겠습니다.html 및 태그에 관해서 잘 모르신다면 HTML 사용해보기 - HTML기본을 참고 부탁드립니다.CSS 적용방법에관해서 3가지 방법이 존재합니다. 인라인(inline) 스타일 내부스타일시트 외부스타일시트 -&amp;gt; 가장 권장되는 사용법입니다.외부 스타일시트가 가장 권장되기는 하지만, 우선순위는 다음과 같습니다브라우저 디자인 정의 -&amp;gt; 외부스타일시트 -&amp;gt; 내부스타일시트 -&amp;gt; 인라인스타일시트인라인 스타일 : style적용을 하고 싶은 태그에 style 속성을 작성&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p style=&quot;color:red; font-size:20px;&quot;&amp;gt; Dodev 하다&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;내부스타일시트 : head태그 안에 style태그를 이용해 작성&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; body { background-color:black; } p { color:white; font-size:20px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt; Dodev 하다 &amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;외부스타일시트 : 별도의 css파일을 작성한 뒤, heaed태그 안에 link태그를 사용해 현재 작성중인 html파일에 연결하여 사용. 가장 권장되는 사용법.아래와 같이 별도의 style을 정의한 .css파일을 생성한다.body { background-color:skyblue; }p { color:purple; text-decoration:underline; font-size: 20px; }생성된 .css파일을 .html파일과 연결한다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;./test.css&quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt; Dodev 하다&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;순서대로 인라인스타일, 내부스타일시트, 외부스타일시트 사용 결과입니다!선택자(selector)선택자(selector)란 html요소, id, class 등 어떤 것을 꾸밀지 선택하는 것 입니다. html 요소 선택자 : html의 요소를 선택합니다. 선택자의 이름은 태그명이 되기 때문에 태그 선택자라고 불리기도 합니다. p : html내의 p태그를 모두 선택합니다. div : html내의 div태그를 모두 선택합니다. 아이디 선택자 : 해당하는 id속성을 가진 태그를 선택합니다. 한 태그 당 최대 1개의 아이디만을 가집니다. #my-name : html의 모든 요소(태그) 중 id속성이 my-name인 태그를 선택합니다.&amp;lt;p id=&quot;my-name&quot;&amp;gt; 또는 &amp;lt;div id=&quot;my-name&quot;&amp;gt;와 같은 태그를 선택하게 됩니다. 클래스 선택자 : 해당하는 class속성을 가진 태그를 선택합니다. 태그에서 class는 다중으로 사용 가능합니다. .my-name : html의 모든 요소(태그) 중 id속성이 my-name인 태그를 선택합니다.&amp;lt;p class=&quot;my-name&quot;&amp;gt; 또는 &amp;lt;div class=&quot;my-name&quot;&amp;gt;와 같은 태그를 선택하게 됩니다. 속성 선택자 : 태그에서 특정 속성을 갖는 요소를 선택합니다. img[src] : &amp;lt;img src=&quot;test.png&quot;&amp;gt;를 선택하지만 img태그는 선택하지 않고, src속성만 선택합니다. 수도(Pseudo) 클래스 선택자 : 요소의 상태에 따라 해당요소를 선택합니다. 요소의 상태란, 마우스를 움직이거나, 클릭하거나, 키보드를 입력할 때 요소의 상태는 변하게 됩니다. 그 변한 상태를 선택합니다. (태그):(수도 클래스 선택자) 의 형식을 가집니다. ex) a:hover :hover : 해당하는 태그에 마우스를 올렸을 경우에만 선택됩니다. :focus : 키보드 이벤트 및 입력 요소에서 포커스가 잡혔을 경우 선택됩니다. :first-child, :last-child : 부모 요소의 자식 중, 가장 첫 번째 또는 마지막 요소를 선택합니다. :active : 특정 요소를 클릭 한 경우 선택됩니다. 속성(property)과 속성 값(property value)속성(property)과 속성 값(property value)은 말 그대로 어떠한 html요소를 선택자를 통해 선택한 뒤, 해당 요소에 어떤 속성을, 그 속성은 무슨값을 주는지를 이릅니다.예를 들어, 아래와 같은 html 파일이 있다고 생각해봅시다.&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;안녕하세요. Dodev 하다입니다.&amp;lt;/h1&amp;gt; &amp;lt;div class=&quot;div_class&quot; id=&quot;first&quot;&amp;gt;첫번째 div&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;div_class&quot; id=&quot;second&quot;&amp;gt;두번째 div&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;div_class&quot;&amp;gt;세번째 div&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;어떠한 CSS도 설정되어 있지 않기 때문에 적힌 내용이 그대로 보일겁니다. 그냥 글자들의 나열이죠.body안에 글자가 4줄 나옵니다. h1태그만 글자 크기가 다르죠.선택자를 이용해 여러가지를 선택한 뒤, CSS를 사용해볼까요?인라인스타일인라인 스타일부터 시작해볼까요?&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.googleapis.com&quot;&amp;gt; &amp;lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot; crossorigin&amp;gt; &amp;lt;link href=&quot;https://fonts.googleapis.com/css2?family=Nanum+Pen+Script&amp;amp;display=swap&quot; rel=&quot;stylesheet&quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1 style=&quot;color:blue;&quot; &amp;gt;안녕하세요. Dodev 하다입니다.&amp;lt;/h1&amp;gt; &amp;lt;div class=&quot;div_class&quot; id=&quot;first&quot; style=&quot;width:200px; height:200px; background-color: yellow;&quot;&amp;gt;첫번째 div&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;div_class&quot; id=&quot;second&quot; style=&quot;height:200px; font-size:20px; font-weight:bold; background-color:black; color: white;&quot;&amp;gt;두번째 div&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;div_class&quot; style=&quot;text-align: center; font-family: &#39;Nanum Pen Script&#39;, cursive; font-size: 100px;&quot;&amp;gt;세번째 div&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;각각의 태그에 직접 style=&quot;&quot;이라는 속성을 줍니다. style속성에 영향을 받아 해당 태그는 속성에 따라 변합니다.이때, style속성안에서 세미콜론(;)으로 구분되는 녀석이 (속성):(속성값);입니다.결과물은 아래와 같습니다.참고로 head태그 안 link태그는 세번째 div에 폰트를 적용하기 위함입니다.내부스타일시트다음으로는 내부스타일시트 입니다.동일한 스타일을 내부스타일시트를 적용하여 사용해보겠습니다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.googleapis.com&quot;&amp;gt; &amp;lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot; crossorigin&amp;gt; &amp;lt;link href=&quot;https://fonts.googleapis.com/css2?family=Nanum+Pen+Script&amp;amp;display=swap&quot; rel=&quot;stylesheet&quot;&amp;gt; &amp;lt;style&amp;gt; h1{ color:blue; } #first{ width:200px; height:200px; background-color: yellow; } #second{ height:200px; font-size:20px; font-weight:bold; background-color:black; color: white; } .div_class{ text-align: center; font-family: &#39;Nanum Pen Script&#39;, cursive; font-size: 100px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;안녕하세요. Dodev 하다입니다.&amp;lt;/h1&amp;gt; &amp;lt;div class=&quot;div_class&quot; id=&quot;first&quot; &amp;gt;첫번째 div&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;div_class&quot; id=&quot;second&quot;&amp;gt;두번째 div&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;div_class&quot;&amp;gt;세번째 div&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;인라인 스타일과 동일한 속성과 속성값을 이용해, 선택자에 맞게 style시트를 내부로 사용했습니다!눈에 딱 보이시겠지만 html코드와 css코드가 나뉘어있어 좀 더 편한 느낌이 있네요~!style태그안에서 선택자를 변화시킬 (속성):(속성값);이 눈에 더 잘 들어옵니다.그런데, 해당 html파일을 브라우저에서 실행해보면 인라인 스타일과 조금 다르게 나옵니다.이렇게 말이지요!인라인 스타일에서는 세번째 div에서만 텍스트 정렬과 폰트설정을 해서, 그렇게 확인이 되었는데지금은 모든 div태그에서 정렬과 폰트가 설정되어 보입니다!이유는 바로 세번째 div태그의 선택자 때문인데요.첫번째 div와 두번째 div는 id를 이용해 개별선택을 한 반면, 세번째 div는 class를 이용해서 선택하였습니다. 왜냐하면 id속성이 없기 때문이죠.이때, 세번째 div의 style속성을 위해 class를 선택하였지만, “div_class”클래스는 모든 div 태그들이 가지고 있는 class속성이죠.그렇기에 첫번째 div, 두번째 div 마지막으로 세번째 div가 정렬 및 폰트 설정에 영향을 받게 됩니다.근데 만약, 세번째에만 정렬과 폰트가 적용이 되었으면 좋겠다면, 다음과 같이 설정해줍니다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.googleapis.com&quot;&amp;gt; &amp;lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot; crossorigin&amp;gt; &amp;lt;link href=&quot;https://fonts.googleapis.com/css2?family=Nanum+Pen+Script&amp;amp;display=swap&quot; rel=&quot;stylesheet&quot;&amp;gt; &amp;lt;style&amp;gt; h1{ color:blue; } #first{ text-align: left; font-family: Verdana, Geneva, Tahoma, sans-serif; width:200px; height:200px; background-color: yellow; } #second{ text-align: left; font-family: Verdana, Geneva, Tahoma, sans-serif; height:200px; font-size:20px; font-weight:bold; background-color:black; color: white; } .div_class{ text-align: center; font-family: &#39;Nanum Pen Script&#39;, cursive; font-size: 100px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;안녕하세요. Dodev 하다입니다.&amp;lt;/h1&amp;gt; &amp;lt;div class=&quot;div_class&quot; id=&quot;first&quot; &amp;gt;첫번째 div&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;div_class&quot; id=&quot;second&quot;&amp;gt;두번째 div&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;div_class&quot;&amp;gt;세번째 div&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;별 다른것은 없습니다. id속성이 first, second인 경우에는 text-align속성과 font-family설정을 미리 해두는것이죠.CSS는 기본적으로 가장 처음의 속성값을 활용합니다. first와 second id속성을 가진 요소에서 text-align속성과 font-family속성을 미리 정의해둔다면,아래쪽에 나오는 .div_class의 text-align속성과 font-family속성은 무시하게 되죠.반대로, .div_class속성이 가장 위에 작성된 경우에는 해당 속성이 사용됩니다.또 다른 방법으로는 세번째 div에 id속성을 설정하고, 설정된 id를 선택자로 사용하면 됩니다.외부스타일시트마지막으로 외부스타일시트 입니다html소스 안에 style태그를 사용해 작성하였던 내부스타일시트형식을, .css파일로 완전 분리를 하는것입니다.다음과 같이 새로운 test.css파일을 하나 작성합니다. h1{ color:blue; } #first{ text-align: left; font-family: Verdana, Geneva, Tahoma, sans-serif; width:200px; height:200px; background-color: yellow; } #second{ text-align: left; font-family: Verdana, Geneva, Tahoma, sans-serif; height:200px; font-size:20px; font-weight:bold; background-color:black; color: white; } .div_class{ text-align: center; font-family: &#39;Nanum Pen Script&#39;, cursive; font-size: 100px; }.css파일을 작성한 뒤, head태그 안에서 link태그를 이용해 .css파일을 연결해줍니다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;./test.css&quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;안녕하세요. Dodev 하다입니다.&amp;lt;/h1&amp;gt; &amp;lt;div class=&quot;div_class&quot; id=&quot;first&quot; &amp;gt;첫번째 div&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;div_class&quot; id=&quot;second&quot;&amp;gt;두번째 div&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;div_class&quot;&amp;gt;세번째 div&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;작성방법 및 적용순서 등은 내부스타일시트와 동일합니다.CSS(디자인)과 html(뼈대)가 완전 분리되어 있기 때문에 코드를 작성, 확인 및 수정 등의 관리가 용이합니다.처음 css를 작성하실때에는 인라인스타일이 태그에서 바로 적용되어 편하지 않을까 생각되기도 하지만,사용하다 보면 생각보다 코드 관리가 굉장히 귀찮고 번거롭다는것을 알 수 있게 됩니다.CSS는 좀 더 발전하여 SASS와 SCSS라는 새로운 녀석도 등장했습니다. CSS문법을 좀더 간결하게 사용하고, 유지보수의 용이성을 더 높인것입니다.주석(comment) html과 동일 내용입니다! 주석의 형식만 다릅니다.프로그래밍에 관해 조금이라도 아신다면 주석이야 다 아시겠지만, 주석이 무엇인지 잘 모르시는 분들을 위해 끼워 넣습니다.주석이란, 작성된 CSS에서 아무런 기능을하지않는 메모입니다. 아무런 역할이 없습니다.//주석입니다(한줄 주석) 또는 /* 주석입니다(다중 주석) */와 같은 형식으로 사용됩니다.사실 많은 초보자분들이 주석을 잘 쓰지 않습니다. 오히려 반대로 시간이 가면 갈 수록 많은 분들이 주석의 참된 의미를 알게되죠.주석은 메모입니다. 사실 혼자 모든 코드를 짜게 되면, 그래서 어느 위치에 어떤 코드가 어떤 역할을 하는지, 어디와 함께 연결되는지를 잘 안다면 메모는 필요가 없죠.협업을 하면서 이 코드가, 혹은 데이터가 무엇인지, 왜 있는지 등에 대한 정보가 필요합니다. 함께 일하는 다른분들을 위해서 현재 내가 작성하는 이 코드가 무엇인지, 왜있는지 등 여러가지 정보를 남겨야 합니다. 그렇지 않으면 매번 코드를 분석하거나 코드를 작성한 분께 가서 여쭤봐야할지도 모르죠.그래서 적어도 메모를 남겨두는 것입니다.또는, 처음부터 끝까지 작성한 코드가 있다고 생각해봅시다. 코드를 작성할때에는 문제가 되지 않습니다. 하지만 1년동안 그 코드를 보지 않았다고 생각해봅시다. 1년 뒤에 그 파일을 열어서 보면 작성할때와는 사뭇 다른 느낌을 받으실겁니다. 그렇기에 본인을 위해서도 주석을 잘 남겨둬야하죠.마무리이번에도 어김없이 포스팅이 길어졌습니다.워낙 방대한 양이라 한 포스팅에서 다루기가 어려운것같습니다. html도, css도, 다음으로 다룰 JS또한 말이죠.기본적인 내용입니다만, 무리없이 편하게 읽을 수 있는 포스팅이 되었으면 합니다.감사합니다." }, { "title": "구글 애드센스(Google Adsense) 광고 적용", "url": "/posts/Google-Adsens-Apply/", "categories": "GitHub Blog", "tags": "GitHub Blog, How to, Google-Adsense", "date": "2021-10-28 19:09:00 +0900", "snippet": "구글 애드센스 승인에 관해 참고 : 구글 애드센스(Google Adsense) 승인구글 애드센스(Google Adsense) 광고 적용구글 애드센스의 심사를 마친 뒤, 이제 애드센스를 적용해야 합니다! 찬찬히 따라하시면 진짜 별 것없습니다.너무 간단해서 포스팅을 해야하나 걱정하다가 그냥 한번 적어봅니다.시작하겠습니다!광고 설정 시작하기구글 애드센스의 심사가 승인이 되었다면 처음으로 보게되는 페이지는 아래와 같습니다.저희는 광고를 적용해야 하기 때문에 광고 설정버튼을 눌러줍니다.아마 버튼을 눌러 다음 단계로 진입하시면 바로 위에 경고 및 알림창이 보일것입니다.그냥 스쳐지나가기엔 너무 중요한 사항들이라 이것부터 먼저 해결해보겠습니다.Ads.txt 설정하기우선 먼저 위쪽의 빨간색 경고창을 자세히 보겠습니다.수익 손실 위험이라고 처음 나오네요. 안됩니다. 수익 손실이라니.. 빨리 해결해야 할 것 같습니다.해당 경고창 우측의 지금 해결하기버튼을 누른 다음, 아래 이미지와 같이 다운로드버튼을 눌러줍니다.구글 애드센스를 적용해야 하는 본인 계정의 사이트에 ads.txt파일이 없기때문에 발생하는 에러입니다.다운로드 버튼을 눌러주면 본인계정의 ads.txt파일이 다운로드 됩니다.다운로드한 ads.txt파일을 아래와 같이 root(/)폴더에 넣어줍니다.root폴더는 이미지와 같이 Gemfile이나 sitemap.xml이 위치한곳입니다. 가장 상단의 폴더이죠.구글 애드센스 고객센터 - ads.txt문제해결을 참고하여 보면 해당 경고 메시지가 사라지기까지 며칠 걸릴 수 있고 사이트에서 광고 요청을 많이 하지 않는 경우 최대 한달까지 걸릴 수 있다고 합니다!저는 오래걸릴것같네요..ㅎㅎ추가] Ads.txt 설정하고 5일 경과 후 확인해보니 해당 경고창은 사라졌습니다! 페이지 뷰도 많지 않지만 생각보다 빨리 사라졌습니다~!sellers.json 설정하기다음 두번째로 노란색 경고창에 관해 보도록 하겠습니다.판매자 정보를 Google sellers.json파일에 게시하라고 뜹니다.구글 애드센스 고객센터 - sellers.json으로 판매자 정보 공개하기를 참고하겠습니다.간단히 말해서 제 사이트에 광고를 하려는 광고주에게 저의 정보를 투명하게 공개하는것이라고 생각하시면 될 것 같습니다.우측 작업버튼을 누르거나 좌측 계정 &amp;gt; 계정 정보로 들어가시면 설정창이 나오게 됩니다.계정정보는 아래와 같이 확인 가능합니다.여기서, 고객 ID : 아무에게도 알리면 안됩니다! 비밀 사항으로 본인만 알고계셔야합니다 웹게시자 ID / 시간대 : 본인 계정으로 시간도 제대로 맞춰져 있을겁니다~ 판매자 정보 공개 상태 : 내부용으로 되어 있을텐데 공개로 맞추고, 도메인을 넣어줍니다.이렇게 하시면 sellers.json설정은 끝입니다.광고 설정 방법광고 설정은 아래와 같이 사이트 기준 또는 광고 단위 기준으로 나뉩니다. 사이트 기준 : google에서 적절한 위치에 적합한 모양으로 자동 광고설정을 합니다. 광고 단위 기준 : 자동 광고 설정이 아닌, 본인이 따로 광고를 게시하고자 하는 위치에 설정합니다.둘 다 알아보도록 할까요?사이트 기준으로 광고 설정하기먼저 사이트 기준부터 보겠습니다. 사이트 기준이란 google에서 적절한 위치에 적합한 모양으로 자동 광고 설정을 합니다. 애초에 사이트 기준의 옛날 명칭은 자동 광고라고 합니다사이트 기준 항목에서 하단부를 보시면 아래와 같이 설정 해제라고 되어 있는것이 확인됩니다.해당 부분의 우측에 연필모양 아이콘을 눌러줍니다.들어가보시면 아래와 같이 확인 가능하실텐데, 해당 화면은 로딩 화면이므로 잠시 기다립니다.모바일 / 데스크톱 사이즈에 따른 내 블로그의 반응형 웹 변화를 보여줍니다.우측에 자동 광고를 활성화시켜주면, 광고가 어떻게 표시되는지 웹 변화를 보여줍니다.적절히 잘 보인다면 사이트에 적용버튼을 눌러 줍니다. 메시지창이 아래와 같이 뜨게 되는데, 지금 변경사항 적용하기를 선택 후 저장해줍니다.메시지 내용과 같이, 변경사항이 반영되기 까지 1시간 정도 소요될 수 있습니다.사이트 기준 항목에서 하단부를 보시면 설정이라고 활성화 되어 보이시면 끝입니다. 1시간정도 이후에 블로그를 확인하여 광고가 정상적으로 보이는지 확인해주시면 됩니다.광고 단위 기준으로 광고 설정하기이번엔 광고 단위 기준을 보겠습니다. 광고 단위 기준이란 자동 광고 설정이 아닌, 본인이 따로 광고를 게시하고자 하는 위치에 광고를 설정합니다.광고 단위 기준 항목에서 하단부를 보시면 디스플레이 광고 / 인피드 광고 / 콘텐츠 내 자동 삽입 광고 / 검색엔진 으로 나뉩니다만 모두 동일합니다.단위 기준으로 넣고자 하는 광고를 디스플레이 광고 / 인피드 광고 / 콘텐츠 내 자동 삽입 광고 / 검색엔진 중에서 선택합니다.선택하면 어떤 광고가 어떻게 보여지는지 미리보기가 나오고, 우측에 디테일을 설정 할 수 있는 부분이 나옵니다.광고 설정을 완료 후 저장 및 코드생성버튼을 누르면 아래와 같이 확인됩니다.해당 코드를 복사하여 본인 블로그의 광고 게재 위치에 넣어줍니다." }, { "title": "구글 애드센스(Google Adsense) 승인", "url": "/posts/Google-Adsense-Approval/", "categories": "GitHub Blog", "tags": "GitHub Blog, How to, Google-Adsense", "date": "2021-10-26 18:14:00 +0900", "snippet": "Google Adsense구글 애드센스(Google AdSense)는 광고주를 위한 애드워즈와 대비되는 구글의 광고 프로그램이다. 웹사이트 소유자는 애드센스에 가입함으로써 광고 수익을 구글과 나눌 수 있다. 광고 수익은 사용자가 애드센스 광고를 클릭함으로써 광고 게시자는 구글에 광고비를 지급하고, 구글은 그렇게 적립된 광고비를 웹사이트 제작자와 나누어 갖는다. 애드센스는 구글에 가입된 광고풀 가운데 웹페이지와 가장 연관성이 높은 광고가 나오게 되지만, 그렇지 못한 경우에 공익광고가 나오게 된다. 공익광고는 사용자가 클릭을 했다고 해도 수익이 생기지 않는다.출처 : 위키백과_구글_애드센스위키백과에 따르면 위와 같은 설명이 따릅니다. 하지만 쉽게 이야기 하자면 아래의 그림으로 설명할 수 있습니다.참고 구글 애드워즈(Google Adwords)는 2018년 7월 24일 부터 구글 애즈(Google Ads)로 명칭이 바뀌었습니다.광고주가 구글을 통해 광고요청을 하면, 구글은 광고주로부터 광고비를 받은 뒤 광고주의 광고를 제공합니다.블로거는 구글로부터 광고를 제공받아 자신의 블로그에 광고를 띄운뒤, 이용자들에게 해당 광고를 노출합니다.그렇게 노출된 광고는 수익이 생성되어 구글과 블로거가 일정 비율로 나누어 받습니다.즉, 구글 애드센스를 이용해 구글에 ‘내 블로그에 광고제공을 할 수 있게 해달라’고 요청하여 승인이 이루어지면 내 블로그에 광고를 띄워 돈을 벌수 있는것 입니다!!신청방법은 초보자를 위한 GitHub Blog 만들기 - 4를 참고해주세요!구글 애드센스 자격요건Google 애드센스 고객센터를 참고하여, 구글 애드센스의 자격요건은 다음과 같습니다. 사이트 페이지가 애드센스 사용에 적합한 상태인가? 페이지만의 특장점이 있는지 페이지의 메뉴가 명확하고 사용하기 쉬운지 독창적이고 흥미로운 콘텐츠를 제공하는 페이지인지? 다음의 요건을 충족하는가? 독창적이고 흥미로운 콘텐츠를 제공하는 페이지인지? 콘텐츠가 애드센스 프로그램 정책을 준수하는지? 만 19세 이상인지? 애드센스에 참여하는 데 사용할 사이트를 본인이 소유하고 있는가? 애드센스를 사용하려면 HTML 소스코드에 대한 액세스 권한이 필요 본인이 소유하고 있지 않은 사이트에는 계정을 활성화 할 수 없음 19세 이상인가?해당 자격요건을 충족하면 애드센스를 신청하고 최대 14일 이후에는 승인이 이루어 집니다.그런데 이게 요건이 되게 애매한 말들이 많습니다.그래서 어떻게 하면 승인이 되냐?고 물으신다면.. 정확한 답을 내어드리기가 어렵습니다.사실 애드센스 승인은 구글이 내부적으로 정한 규정에 따르는데, 그 “규정”이 공개되어 있지가 않습니다.상기 4가지 항목 및 구글 내부 규정을 충족하면 그때 승인이 이루어집니다.구글 애드센스 승인의 소문자, 여기서 제가 “소문”이라고 이야기 한 바에 관해 먼저 이야기 하도록 하겠습니다.위에서도 이야기했듯, “구글 내부 규정”이 공개되어 있지 않아서 나오는 여러가지 이야기들이 있습니다.다음 조건을 만족하면 무조건 애드센스 승인된다! 조건은 한 포스팅에 단어가 몇 글자, 포스팅의 개수가 일정 이상, 포스팅에 이미지 사용, 포스팅 주제… 등등 이런류의 게시글이 많습니다.그래서 조금 추려볼까해요.애드센스의 승인을 위한 일명 ‘족보’라고 불리는 항목은 아래와 같습니다. 블로그 운영기간이 3개월 이상 포스팅 개수가 최소 20개 또는 100개 포스팅 당 글자 수 또는 단어가 1000~1500자 이상 전문성 있는 포스팅을 하나의 주제로 작성한다. 맞춤법, 띄워쓰기, 존댓말 검사 1일 1포스팅 또는 일주일에 3~4포스팅 포스팅에 링크사용X 카테고리는 1~2개 구글 애널리틱스 사용 하루 평균 방문자수 200명 이상 방문자 이탈률이 60% 이하 및 체류기간 2분 이상등 이외에도 많은 항목이 존재합니다.그런데 왜 ‘소문’이라고 했냐하면, 전 해당 항목이 별로 없습니다 ㅎㅎ. 그래서 제 기준으로 다시 말씀드리려 합니다.필자의 해당사항우선 제 블로그에 관해서 이야기 해보겠습니다.위에서 이야기 했던 ‘족보’를 토대로 살펴볼까요? 해당사항 체크 : 해당하지 않음 : 해당 블로그 운영기간이 3개월 이상 제 블로그 개설 날 첫 게시글을 작성했습니다. 2021년 9월 23일로, 이제야 겨우 한달쯤 되었네요. 포스팅 개수가 최소 20개 또는 100개 해당 포스팅을 작성하기 전 승인이 났으니까, 12개의 포스팅이였습니다! 포스팅 당 글자 수 또는 단어가 1000~1500자 이상 아.. 이건 단어는 어쩌죠? 글자수로 확인하자면, 12개 포스팅 평균 글자수는 약 5648자 입니다!! 훨씬 더 많네요!! 전문성 있는 포스팅을 하나의 주제로 작성한다 아 이건 제 사심으로 해당사항에 넣었습니다. 맞춤법, 띄워쓰기, 존댓말 검사 셋 다 지키려고 하는데 검사는 따로 안하고, 그냥 내키는대로 작성합니다. 1일 1포스팅 또는 일주일에 3~4포스팅 음.. 사실 포스팅도 내킬때만 하는데 그게 일주일에 3~4포스팅에 조금은 근접하는것 같네요 ㅎㅎ 포스팅에 링크사용X 내부, 외부링크 아무것도 쓰면 안된다고 하는데 저는 거의 포스팅마다 내/외부링크를 사용했습니다! 카테고리는 1~2개 4~5개의 카테고리가 있습니다. 구글 애널리틱스 사용 사용중입니다! 하루 평균 방문자수 200명 이상 아 이건 절대절대 아니예요. 제 마음이 슬프긴한데 방문자수가 거의 0에 수렴합니다. 방문자 이탈률이 60% 이하 및 체류기간 2분 이상 10번 항목과 동일합니다. 마음이 쓰리네요.. 이외에도 많은 ‘소문’들이 있겠지만, 저는 우선 11개 항목중에 많이 쳐서 3개가 들어갑니다.어떻게 필자는 애드센스 승인을 받았는가블로그 만든지도 얼마 안되고, 포스팅도 없고 애초에 방문자가 거의 없으며 널리 알려진 여러가지 항목들에 해당이 되지 않는 제가! 도대체! 어떻게! 애드센스 승인을 받았는가!사실 저도 모릅니다. 알고 있으면 얼른 말씀드리고 싶어요.하지만 저도 지키는 규칙이 있습니다. 포스팅 작성은 대충하지 않는다. 적어도 노력을 한다. 포스팅의 주제 및 방향성은 연결성있게 작성한다.이것 두 개입니다. 별 것 없지요?네.. 그래서 제가 말씀드릴바가 없습니다. 찾아오신분들 죄송하지만 해답은 없습니다..애드센스 승인 자체가 여러가지 항목을 확인 후 심사결과가 나오고, 그 여러가지 항목이라는게 공개되지 않아서 이렇게 꼭 해야한다! 그런건 없다고 봅니다.그런데 저는 사실 4번정도 애드센스 사이트가 다운되었거나 사용할 수 없음으로 승인 거절을 당했습니다 ㅠㅠ.신청하고 다음날 보면 해당 문구가 뜨면서 승인이 나질 않았습니다.분명히 &amp;lt;head&amp;gt;와 &amp;lt;/head&amp;gt;사이에 애드센스에서 제공한 코드를 삽입해두었고 구글 서치 콘솔(google search-console)에도 등록이 되어 정상적으로 페이지가 잘 떴는데도 위와 같은 에러가 발생했습니다.[애드센스 사이트가 다운되었거나 사용할 수 없음] 해결방법“애드센스 사이트가 다운되었거나 사용할 수 없음” 승인거절의 요인은 크게 다음과 같습니다. 구글 애드센스(Google Adsense)에 신청한 페이지가 잘못된 경우 사이트 주소의 오탈자가 없는지 확인합니다! 구글 애드센스(Google Adsense)에 신청한 페이지가 본인 소유가 아닌경우 구글 애드센스 코드를 본인이 신청한 사이트의 &amp;lt;head&amp;gt;와 &amp;lt;/head&amp;gt;사이에 넣어야 하는데, 신청한 사이트의 html파일을 수정하지 못하는 즉, 본인이 소유하고있지 않은 경우 구글 애드센스 코드를 확인할 수 없습니다! 구글 애드센스에서 구글 애드센스 코드를 찾을 수 없는 경우 본인이 신청한 사이트의 &amp;lt;head&amp;gt;와 &amp;lt;/head&amp;gt;사이에서 애드센스 코드를 찾을 수 없는 경우 본인이 신청한 사이트에 접근이 불가능 한 경우(저는 여기에 속했습니다.) 저는 분명히 사이트 주소도 맞고, 코드도 제자리에서 확인이 되는데 계속해서 승인거절이 나서, 사실 위에 언급했던 해당 ‘족보’를 만족해야 하는건가? 하는 생각을 했지만서도 뭔가 다른 문제가 있을거라 생각해서 확인해보니 404에러 페이지가 걸렸습니다.sitemap.xml에는 문제가 없었지만 저는 이 블로그가 처음이 아니였습니다!현재 제 블로그 주소는 https://wlqmffl0102.github.io/ 인데요,예전 제 블로그 주소는 https://wlqmffl0102.github.io/Dodev_blog.io 였습니다!예전 블로그는 예전 포스팅 및 여러페이지를 포함해 모두 사라졌지만, 구글 서치 콘솔(google search-console)에는 해당 경로들이 남아있어서 특정 포스팅 및 경로들이 존재하지만 실제로는 404에러가 발생하는페이지 들이 있었습니다.그래서 구글 서치콘솔에서 관련 링크는 제거하고, 내용이 모두 사라지길 우선 기다렸습니다. 변경사항은 일주일정도 걸린답니다!일주일이 지난 뒤 404에러가 발생하는 링크는 모두 사라졌고, 다시 요청을 했으나 계속해서 같은 승인거절을 받았습니다.sitemap.xml도, robots.txt도 전혀 문제가 날 법한 사항이 없었지만 동일한 승인거절로 인해서 서칭을 해봤더니 sitemap.xml과 robots.txt설정에도 연관이 있다고 하더라구요!저는 여기서 robots.txt설정에 문제가 있었습니다!승인거절이 났을때의 robots.txt는 아래와 같았습니다.User-agent: *Allow: /Sitemap: https://wlqmffl0102.github.io/sitemap.xml사실 이렇게 보면 문제가 없어보이거든요 ㅠㅠ User-agent : 검색 로봇에게 웹 페이지의 접근을 허용 및 제한하는 국제 권고안입니다!* 으로 설정되어 있으면 모든 검색엔진 로봇의 접근허용을 뜻합니다. Allow : 허용할 경로 Sitemap : sitemap.xml의 경로즉, 위 설정을 보자면 모든 검색엔진의 로봇에 대해서 페이지의 수집을 허용한다라는 설정이기때문입니다.아무리 봐도 문제가 없는데도 신청하고 다음날 보면 승인이 거절이되어서.. robots.txt파일을 아래와 같이 수정하였습니다.User-agent: *Disallow:Sitemap: https://wlqmffl0102.github.io/sitemap.xml다른것은 동일하고, Allow를 Disallow로 변경 후 경로를 지웠습니다.그러자 신청 다음날도 그 다음날도 사이트를 검토중입니다 라고 나오더니, 3주 쪼오금 더 지나서 오늘 승인이 났습니다~!왜 저렇게 설정해야 하는지는 사실 아직 잘 모르겠습니다 ㅠ 관련 사항을 조금 더 살펴본 뒤 내용을 추가하도록 하겠습니다.마무리마무리 별 것 없습니다! 다음은 애드센스광고를 블로그에 적용하는 방법을 알아보도록 하겠습니다.감사합니다!" }, { "title": "HTML - 많이 사용되는 태그 28선", "url": "/posts/The-Thirty-Two-Elements-Used-On-Most-Pages/", "categories": "html", "tags": "html, study", "date": "2021-10-16 20:01:00 +0900", "snippet": "두서많이 사용되는 태그 28선사실 태그의 종류는 워낙 많기 때문에, 모든 태그를 다 외울 수는 없습니다. 그래서 적당히 필요한 태그를 다뤄보고자 하는데 어떤 것을 순차적으로 쓰면 좋을까 생각하다 사용빈도가 높은 태그들을 다루는것으로 결정했습니다. Advanced Web Ranking페이지를 참조하여, 사용빈도가 높은 태그는 아래와 같습니다.홈페이지상으로는 32선으로 확인되나, 차트는 28개가 확인되어 28개로 진행하겠습니다!html 태그역시 &amp;lt;html&amp;gt;태그가 1위 입니다. 모든 웹 페이지는 해당 태그가 무조건 들어가야 합니다. 시작태그 &amp;lt;html&amp;gt;과 종료태그 &amp;lt;/html&amp;gt;이 있습니다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;title&amp;gt;THIS IS A TITLE&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;This is a page&amp;lt;p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;위와 같이 모든 태그들은 &amp;lt;html&amp;gt;태그 안에 존재해야합니다.head 태그대부분 웹 브라우저 화면상에는 나타나지 않지만, html에서 필요한 여러가지 정보들이 해당 태그 안에 들어갑니다. &amp;lt;meta&amp;gt;(인코딩 타입), &amp;lt;title&amp;gt;(페이지 제목), &amp;lt;style&amp;gt;(CSS) 등의 태그 등이 &amp;lt;head&amp;gt;태그 안에서 사용됩니다. 대부분이 웹 브라우저에 나타나지 않지만 &amp;lt;title&amp;gt;태그는 브라우저 상단 페이지 제목으로 브라우저에서 표시됩니다. 하나의 문서당 단 하나의 head태그가 존재합니다.시작태그 &amp;lt;head&amp;gt;와 종료태그 &amp;lt;/head&amp;gt;가 있습니다. &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;title&amp;gt;THIS IS A TITLE&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt;body 태그브라우저의 실질적인 표시 영역입니다. 여러가지 태그들이 사용되어 화면을 구성합니다.시작태그 &amp;lt;body&amp;gt;와 종료태그 &amp;lt;/body&amp;gt;가 있습니다. &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;안녕하세요. Dodev 하다 입니다.&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;title 태그웹 브라우저의 상단 제목 표시줄에 나타납니다. &amp;lt;head&amp;gt;태그 안에 속해있어야 합니다.시작태그 &amp;lt;title&amp;gt;과 종료태그 &amp;lt;/title&amp;gt;이 있습니다. &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;THIS IS A TITLE&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt;meta 태그해당 웹 페이지의 인코딩 및 문서 키워드, 요약 정보를 가집니다.&amp;lt;head&amp;gt;태그 안에 속해있어야 합니다.시작태그 &amp;lt;meta&amp;gt;만 있습니다. &amp;lt;head&amp;gt; &amp;lt;!--인코딩 설정--&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;/head&amp;gt;div 태그Division의 약자로, 아무런 의미를 뜻하지는 않지만 레이아웃을 나누는데에 사용됩니다. 여러가지 내용을 묶어서 표현해야 할 때 사용됩니다.시작태그 &amp;lt;div&amp;gt;와 종료태그 &amp;lt;/div&amp;gt;가 있습니다a 태그Anchor의 약자로, 다른 웹 페이지로 연결해줍니다. 보통 “하이퍼링크”라고 생각하는 것이 이 &amp;lt;a&amp;gt;태그를 이용하여 만들어집니다.시작태그 &amp;lt;a&amp;gt;와 종료태그 &amp;lt;/a&amp;gt;가 있습니다&amp;lt;a href=&quot;https://wlqmffl0102.github.io/&quot;&amp;gt; Dodev 하다의 블로그 &amp;lt;/a&amp;gt;a태그의 href(hypertext reference)속성을 이용하여 사용됩니다.인터넷에서 a태그 관련 정보를 보시면 아래와 같이 href속성값이 “#”인 것을 많이 보실텐데요.&amp;lt;a href=&quot;#&quot;&amp;gt; Dodev 하다의 블로그 &amp;lt;/a&amp;gt;이 링크는 어디로도 연결되지 않습니다. 그냥 모양만 있고 작동은 하지 않습니다. null링크 라고 합니다. 사용하지 않는것이 좋다고 생각합니다!script 태그script코드를 사용하기 위해 반드시 필요한 태그 입니다. html은 기본적으로 정적인 페이지이지만 html과 script코드를 사용해서 동적인 페이지로 사용할 수 있습니다.보통은 javascript를 사용하기 위해 해당 태그를 사용합니다.시작태그 &amp;lt;script&amp;gt;와 종료태그 &amp;lt;/script&amp;gt;가 있습니다.link 태그외부의 리소스를 현재 작성중인 문서로 불러올때 사용합니다.보통 CSS문서를 가져오는데에 많이 사용되지만 favicon(파비콘)연결 등 에서도 사용됩니다.시작태그 &amp;lt;link&amp;gt;만 있습니다.현재 작성중인 문서는 html만 작성하고, CSS는 완전히 별개로 작성한 뒤 .css파일로 저장해둡니다.이후 저장된 .css파일을 작성중인 문서와 연결하여 사용할때 link태그를 사용해 연결합니다.&amp;lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/nvd3/1.8.2/nv.d3.css&quot; rel=&quot;stylesheet&quot; type=&quot;test/css&quot;&amp;gt;위 예시는 현재 작성중인 문서에 외부 문서. 즉 nv.d3.css파일을 연결하겠다는 의미입니다.a태그와 마찬가지로 href(hypertext reference)속성을 이용해 어떤 파일과 연결할지 명명합니다.해당 파일은 CSS이므로 rel(relation)속성에 stylecheet라고 적어줍니다.type 또한 text로 이루어진 css파일임을 명시합니다.연결이 정상적으로 되었다면 현재 작성중인 html문서에 css를 하나도 작성하지 않았더라도 nv.d3.css와 연결되어 있어 nv.d3.css에 작성된 style을 바로 사용할 수 있습니다.또한, favicon(파비콘)을 연결할때에는 아래와 같이 사용됩니다.favicon이란 웹 사이트 가장 상단, 제목 바로 앞에 붙는 아이콘을 말합니다.&amp;lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/png&quot;&amp;gt;href속성을 이용해 어떤 파일이 favicon으로 보여질지 작성합니다.rel속성과 type속성도 맞추어 icon, imag/png로 작성합니다.img 태그이미지를 넣을때에 사용되는 속성입니다. 한 태그당 하나의 이미지를 넣을 수 있습니다.시작태그 &amp;lt;img&amp;gt;만 있습니다.&amp;lt;img src=&quot;https://img.insight.co.kr/static/2018/02/12/700/vrk5z3a409vt02d3jvb7.jpg&quot; /&amp;gt;주로 사용되는 속성은 src : 이미지 경로 alt : 이미지를 표시할 수 없을 때 나오는 내용 width : 이미지 가로 크기 height : 이미지 세로 크기등이 있습니다.span 태그div 태그와 비슷한 태그입니다.div태그와 동일하게 아무런 의미가 없는 태그 입니다. div와 차이점은 div태그는 자동으로 줄바꿈이 되지만, span태그는 자동으로 줄바꿈이 되지 않는다는 것 입니다.시작태그 &amp;lt;span&amp;gt;과 종료태그 &amp;lt;/span&amp;gt;이 있습니다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div&amp;gt;안녕하세요.&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Dodev 하다입니다.&amp;lt;/div&amp;gt; &amp;lt;br&amp;gt; &amp;lt;br&amp;gt; &amp;lt;span&amp;gt;안녕하세요.&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Dodev 하다입니다.&amp;lt;/span&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;예시 코드를 돌려보면 아래와 같이 확인됩니다.p 태그paragraph의 약자로, 하나의 문단(단락)을 만들때 사용되는 태그입니다. 시작태그 &amp;lt;p&amp;gt;와 종료태그 &amp;lt;/p&amp;gt;가 있습니다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt; 안녕하세요 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; Dodev 하다 입니다. &amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;li 태그아래에 나올 ul태그 또는 ol태그안에서 목록을 사용하는데에 사용되는 태그입니다. 항상 ul(unordered list) 또는 ol(ordered list)과 함께 쓰이며 단독으로 쓰이지 않습니다.시작태그 &amp;lt;li&amp;gt;와 종료태그 &amp;lt;/li&amp;gt;가 있습니다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;!--또는 &amp;lt;ol&amp;gt;--&amp;gt; &amp;lt;li&amp;gt; 목록내용 1 &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; 목록내용 2 &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;&amp;lt;!--또는 &amp;lt;/ol&amp;gt;--&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;ul 태그unordered list의 약자로, 순서없는 목록을 만드는데에 사용됩니다.ol태그는 ordered list의 약자로, 순서가 있는 목록을 만드는데에 사용됩니다.시작태그 &amp;lt;ul&amp;gt;과 종료태그 &amp;lt;/ul&amp;gt;이 있습니다.그리고 시작태그 &amp;lt;ol&amp;gt;과 종료태그 &amp;lt;/ol&amp;gt;이 있습니다.ul태그는 순서가 없으므로 글 머리에 특수기호(●)가 붙습니다.ol태그는 순서가 있으므로 글 머리에 default로 숫자가 붙습니다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; ul 목록내용 1 &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; ul 목록내용 2 &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt; ol 목록내용 1 &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; ol 목록내용 2 &amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;style 태그스타일 정보 정의를 위해 사용합니다. 보통 CSS를 명시하며 head태그 안에 사용됩니다.시작태그 &amp;lt;style&amp;gt;과 종료태그 &amp;lt;/style&amp;gt;이 있습니다.여기서 잠시.CSS 적용방법에관해서 3가지 방법이 존재합니다. 인라인(inline) 스타일 내부스타일시트 -&amp;gt; 이 방법이 style태그를 이용하는 방법입니다. 외부스타일시트 -&amp;gt; 가장 권장되는 사용법입니다.인라인 스타일 : style적용을 하고 싶은 태그에 style 속성을 작성&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p style=&quot;color:red; font-size:20px;&quot;&amp;gt; Dodev 하다&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;내부스타일시트 : head태그 안에 style태그를 이용해 작성&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; body { background-color:black; } p { color:white; font-size:20px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt; Dodev 하다 &amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;외부스타일시트 : 별도의 css파일을 작성한 뒤, heaed태그 안에 link태그를 사용해 현재 작성중인 html파일에 연결하여 사용. 가장 권장되는 사용법.아래와 같이 별도의 style을 정의한 .css파일을 생성한다.body { background-color:skyblue; }p { color:purple; text-decoration:underline; font-size: 20px; }생성된 .css파일을 .html파일과 연결한다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;./test.css&quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt; Dodev 하다&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;순서대로 인라인스타일, 내부스타일시트, 외부스타일시트 사용 결과입니다!br 태그줄바꿈 태그입니다. 시작태그 &amp;lt;br&amp;gt;만 있습니다.h2 태그heading태그 중 하나 입니다. 시작태그 &amp;lt;h2&amp;gt;와 종료태그 &amp;lt;/h2&amp;gt;가 있습니다.head태그와 heading태그는 전혀 다릅니다.heading태그는 총 6개로, 주로 머리말이나 제목을 표현하기위해 사용됩니다. h1 : heading태그 중 글자 크기가 가장 큽니다. h2 h3 h4 h5 h6 : heading태그 중 글자 크기가 가장 작습니다.h1~6까지만 heading태그로 지원되며, h7~는 heading태그로 지원되지 않고 일반 텍스트로 표현됩니다.input 태그form태그 내부의 태그 입니다. form은 웹 페이지의 입력 양식을 나타내는 태그입니다. 그냥 양식을 만드는 태그이기 때문에, 그안에서 사용자로부터 입력을 받기 위한 태그 input이 존재합니다.시작태그 &amp;lt;input&amp;gt;만 있습니다.말 그대로 사용자로부터 어떠한 입력을 받기 위해 사용되는 태그이기 때문에 어떤 유형의 입력을 받을 것 인지, 입력받은 값은 무엇인지 등 여러가지 속성이 있습니다&amp;lt;form&amp;gt; &amp;lt;p&amp;gt;아이디&amp;lt;/p&amp;gt; &amp;lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;아이디&quot;&amp;gt;&amp;lt;/form&amp;gt;input태그에는 여러가지 속성이 존재합니다. type 속성 : 입력 태그의 유형 text : 일반 텍스트 hidden : 화면에는 표시되지 않지만 서버로 데이터를 전송시 함께 전송됨 password : 비밀번호 입력 tel : 전화번호 입력 email : 이메일 입력 number : 숫자 입력(화살표로 조절) range : 숫자 입력(슬라이드바로 조절) radio : 라디오 버튼 -&amp;gt; 여러가지 옵션 중 하나만 선택 가능 checkbox : 체크박스 -&amp;gt; 여러가지 옵션 중 다중 선택 가능 submit : 서버 전송 버튼 button : 버튼 reset : 리셋 버튼 … 등 name 속성 : 사용자로부터 입력받은 데이터의 이름(임의지정가능). 서버로 보내지는 데이터명 value 속성 : defualt(기본값)로 보여지는 내용. id 속성 : id값을 통해 여러가지 input태그를 구별 그 외 속성(readonly, placeholder, autofocus, max/min, required 등) readonly : 읽기 전용 필드. 입력 불가. placeholder : 어떤 값을 입력해야 하는지 알려주는 힌트 내용 autofocus : 페이지가 열리자 마자 마우스 커서가 표시되도록 설정 max/min : 필드의 최대/최소값 설정 required : 필수 입력 필드. 여러 속성들이 존재하지만 그중 type 속성이 가장 중요합니다. type속성에 따라 보여지는 input태그의 모습이 바뀌어 사용자로부터 받는 값이 변하기 때문입니다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;!-- form을 하나 만듭니다. 해당 form을 모두 작성한 뒤 submit버튼을 누르면 get방식으로 전송되어 main.html 페이지로 넘어갑니다. --&amp;gt; &amp;lt;form method=&quot;get&quot; action=&quot;/main.html&quot;&amp;gt; &amp;lt;p&amp;gt; &amp;lt;!-- 브라우저에서 보이지 않으나 submit버튼을 누르면 해당 값이 함께 서버로 전송됨 --&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;country&quot; value=&quot;korea&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;!-- onclick 이벤트를 걸어 버튼을 누르면 alert의 내용이 메시지 창으로 뜨게 됨 --&amp;gt; &amp;lt;button type=&quot;button&quot; onclick=&quot;alert(&#39;아래 양식을 입력해주세요!&#39;)&quot;&amp;gt;버튼 클릭(메시지 표시)&amp;lt;/button&amp;gt; &amp;lt;p&amp;gt; 아이디 &amp;lt;!-- placeholder는 &#39;힌트&#39; 그렇기 때문에 입력창의 value값이 아님. 마우스 커서를 올려보면 커서가 가장 앞에 위치 --&amp;gt; &amp;lt;input type=&quot;text&quot; name=&quot;name&quot; placeholder=&quot;아이디&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 비밀번호 &amp;lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;비밀번호&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 이름 &amp;lt;!-- value는 &#39;값&#39; 마우스 커서를 올려보면 value의 내용(디폴트값)이 선택됨. 해당 기본값을 지우고 값을 작성해야함 --&amp;gt; &amp;lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;이름&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 성별 &amp;lt;!-- 둘 중 하나만 선택 가능함 --&amp;gt; &amp;lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;M&quot;&amp;gt;남자 &amp;lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;F&quot;&amp;gt;여자 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 나이 &amp;lt;!-- number는 입력창 옆에 화살표 버튼이 있으며, text 타입처럼 키보드로 숫자를 적어넣을 수도 있음 --&amp;gt; &amp;lt;input type=&quot;number&quot; name=&quot;age&quot; value=&quot;0&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 전화번호 &amp;lt;input type=&quot;tel&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 이메일 주소 &amp;lt;input type=&quot;email&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 좋아하는 숫자 &amp;lt;!-- range는 막대 바 형식의 숫자입력창. max(최대값), min(최소값), step(숫자의 간격) 등의 속성이 사용됨 --&amp;gt; &amp;lt;!-- step속성의 값이 10으로 설정되어 있기 때문에, 0, 10, 20, 30, 40... 과 같이 선택가능함 --&amp;gt; &amp;lt;!-- 사용자의 브라우저가 range타입을 지원하지 않으면 text타입으로 보여짐 --&amp;gt; &amp;lt;input type=&quot;range&quot; name=&quot;favorite_num&quot; min=&quot;0&quot; max=&quot;100&quot; value=&quot;10&quot; step=&quot;10&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 좋아하는 꽃 &amp;lt;!-- 다중선택가능 --&amp;gt; &amp;lt;input type=&quot;checkbox&quot; name=&quot;flower&quot; value=&quot;rose&quot;&amp;gt;장미 &amp;lt;input type=&quot;checkbox&quot; name=&quot;flower&quot; value=&quot;hyacinth&quot;&amp;gt;히야신스 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;!-- 입력한 내용들을 서버로 제출함. form에서는 필수 요소 --&amp;gt; &amp;lt;input type=&quot;submit&quot; value=&quot;제출&quot;&amp;gt; &amp;lt;input type=&quot;reset&quot; value=&quot;리셋&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;h1 태그heading태그 중 하나 입니다. 시작태그 &amp;lt;h1&amp;gt;과 종료태그 &amp;lt;/h1&amp;gt;이 있습니다.head태그와 heading태그는 전혀 다릅니다.heading태그는 총 6개로, 주로 머리말이나 제목을 표현하기위해 사용됩니다. h1 : heading태그 중 글자 크기가 가장 큽니다. h2 h3 h4 h5 h6 : heading태그 중 글자 크기가 가장 작습니다.h1~6까지만 heading태그로 지원되며, h7~는 heading태그로 지원되지 않고 일반 텍스트로 표현됩니다.form 태그웹 페이지에서 하나의 입력 양식을 만드는 태그입니다. 이 form태그 안에 다양한 input태그가 존재하며, form태그 안에는 submit타입 버튼을 꼭 포함하고 있습니다.작성 후 submit버튼을 클릭하면, 해당 submit버튼을 포함하는 form태그의 작성 내용들이 한꺼번에 서버로 전송됩니다.시작태그 &amp;lt;form&amp;gt;과 종료태그 &amp;lt;/form&amp;gt;이 있습니다.form태그 속성으로는 5개가 있습니다. action : form양식을 submit버튼으로 제출하게되면 form을 서버 측으로 전송하게 되며 action속성을 이용해 서버 측 어떤 파일로 전송될지 지정합니다. name : form을 식별하기 위한 이름 accept-charset : form을 전송할 때 사용할 문자 인코딩 target : action으로 지정한 파일이 현재 창이 아닌 다른 위치에 열도록 지정합니다. method : form을 서버 측으로 전송할때 사용하는 http메소드를 지정(get 또는 post) &amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&quot;/main.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot; name=&quot;loginform&quot;&amp;gt; &amp;lt;p&amp;gt; 아이디 &amp;lt;input type=&quot;text&quot; name=&quot;name&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 비밀번호 &amp;lt;input type=&quot;password&quot; name=&quot;password&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;input type=&quot;submit&quot; value=&quot;로그인&quot;&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;h3 태그heading태그 중 하나 입니다. 시작태그 &amp;lt;h3&amp;gt;과 종료태그 &amp;lt;/h3&amp;gt;이 있습니다.head태그와 heading태그는 전혀 다릅니다.heading태그는 총 6개로, 주로 머리말이나 제목을 표현하기위해 사용됩니다. h1 : heading태그 중 글자 크기가 가장 큽니다. h2 h3 h4 h5 h6 : heading태그 중 글자 크기가 가장 작습니다.h1~6까지만 heading태그로 지원되며, h7~는 heading태그로 지원되지 않고 일반 텍스트로 표현됩니다.nav 태그navigation links의 약자로, 현재 페이지 또는 다른 페이지와 연결하는 링크를 뜻합니다.보통 메뉴, 목차, 인덱스 등이 있습니다. 그래서 보통 nav태그 안에 목록 태그인 ul 또는 ol태그와 li태그를 사용합니다.시작태그 &amp;lt;nav&amp;gt;와 종료태그 &amp;lt;/nav&amp;gt;가 있습니다. &amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Categories&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Tags&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Archives&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;footer 태그말 그대로, 문서의 가장 하단부 요소를 뜻합니다. 해당 문서에 관한 정보(글쓴이, 저작권, 연락처 정보 등)들을 담고 있어야 합니다.시작태그 &amp;lt;footer&amp;gt;와 종료태그 &amp;lt;/footer&amp;gt;가 있습니다.단어 느낌 적으로 한 문서당 하나만 있어야 할 것 같지만, 사실 한 문서에 여러개의 footer 태그를 사용할 수 있습니다.header 태그head태그와 heading태그와는 또 다른 태그입니다. header태그는 해당 문서나 특정 섹션의 도입부에 해당되는 요소입니다. 하나의 문서에서 여러번 사용할 수 있습니다.시작태그 &amp;lt;header&amp;gt;와 종료태그 &amp;lt;/header&amp;gt;가 있습니다.Naver의 header부분은 다음과 같습니다.iframe 태그Inline Frame의 약자로, 웹 페이지 안에 또 다른 웹 페이지를 삽입할 때 사용됩니다.시작태그 &amp;lt;iframe&amp;gt;과 종료태그 &amp;lt;/iframe&amp;gt;이 있습니다.지도, 영상 등 여러 페이지를 삽입 할 수 있으며, 아래는 iframe태그를 이용해 구글지도를 삽입한 모습입니다.구글 지도 &amp;gt; 주소 검색 &amp;gt; 공유 &amp;gt; 지도퍼가기 &amp;gt; HTML복사 &amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;구글 지도 - N서울타워&amp;lt;/p&amp;gt; &amp;lt;iframe src=&quot;https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d12652.661205783037!2d126.97949329075564!3d37.551169078392675!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x357ca257a88e6aa9%3A0x5cf8577c2e7982a5!2zTuyEnOyauO2DgOybjA!5e0!3m2!1sko!2skr!4v1635071066687!5m2!1sko!2skr&quot; width=&quot;600&quot; height=&quot;450&quot; style=&quot;border:0;&quot; allowfullscreen=&quot;&quot; loading=&quot;lazy&quot;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;button 태그form 요소 중 하나로, input태그의 type속성을 이용해서 사용 할 수도 있습니다.&amp;lt;input type=&quot;button&quot;&amp;gt;과 같이 사용됩니다.시작태그 &amp;lt;button&amp;gt;과 종료태그 &amp;lt;/button&amp;gt;이 있습니다.button태그의 속성은 submit : form 제출 reset : form 리셋 (none) : type을 설정하지 않는 경우 버튼의 모양만 만들어지며, 동작 수행을 위해서는 따로 이벤트처리를 해줘야 합니다.strong 태그중요내용 강조 태그 입니다. 해당 태그 안의 글자가 진하게 보여집니다.쉽게 말하면 “굵게”표시 입니다. 동일하게 “굵음”표시를 하는 b태그가 있습니다만 조금 사용방법이 다릅니다.시작태그 &amp;lt;strong&amp;gt;과 종료태그 &amp;lt;/strong&amp;gt;이 있습니다. b 태그 : 단순히 텍스트를 진하게 표시 strong 태그 : 페이지 내의 중요한 부분을 진하게 표시 -&amp;gt; 브라우저에 지원되는 웹 접근성에 기여&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;이것은 그저 &amp;lt;b&amp;gt;텍스트를 굵게&amp;lt;/b&amp;gt; 만듭니다.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;이것은 현재 문서 안에서 &amp;lt;strong&amp;gt;중요도가 높은 텍스트를 굵게&amp;lt;/strong&amp;gt; 만듭니다 &amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;i 태그italic의 약자로, 해당 태그 안의 글자가 기울어져 보입니다.동일하게 “기울임”표시를 하는 em태그가 있지만, 이 또한 사용처가 다릅니다.시작태그 &amp;lt;i&amp;gt;와 종료태그 &amp;lt;/i&amp;gt;가 있습니다. i 태그 : 단순히 텍스트를 기울임 em 태그 : 페이지 내의 중요한 부분을 기울여 표시 -&amp;gt; 브라우저에 지원되는 웹 접근성에 기여&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;이것은 그저 &amp;lt;i&amp;gt;텍스트를 기울입니다&amp;lt;/i&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;이것은 현재 문서 안에서 &amp;lt;em&amp;gt;중요도가 높은 텍스트를 기울입니다&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;시맨틱 태그시맨틱(Semantic) 이란 “의미의, 의미론적인”이라는 뜻을 가진 영단어 인데요.HTML5에 도입된 시맨틱 태그는, 태그의 이름만 보고도 해당 태그가 어떤 역할인지 바로 알 수 있는 태그를 말합니다.div태그는 이름만 보고 어떤 내용이 들어있는지 알 수 없습니다.하지만 header태그, footer태그, nav태그, aside태그의 경우 태그 이름만 보고도 어떤 내용이 들어가는지 대략적으로 가늠할 수 있습니다.header, footer, article, aside, section, time태그 등이 시맨틱 태그에 속합니다.위 그림처럼 시맨틱 태그를 사용하여 레이아웃을 이해 및 구성할 수 있습니다. 구조는 설계자에 따라 달라지나 대부분 위와 같은 구조를 기본으로 합니다.마무리세상에! 포스팅이 또 너무 길어졌습니다..ㅠ 호흡 조절이 필요한 부분에서 잘 조절하지 못한것같습니다.html은 우선은 이정도만 작성하도록 하고, CSS로 넘어가보자 합니다!읽어주신 분들 모두에게 감사드립니다!" }, { "title": "HTML 사용해보기", "url": "/posts/Try-Using-Html/", "categories": "html", "tags": "html, study", "date": "2021-10-15 21:37:00 +0900", "snippet": "HTML과 CSS 그리고 JAVASCRIPTCSS 사용해보기Javascript를 어떻게 다뤄볼 수 있을까?두서안녕하세요. Dodev 하다입니다. 깃헙블로그 만들기에서 시작해서 html까지 왔습니다.현재 게시글 작성 기준 2021년 10월 입니다. html은 1991년 10월에 일반인들에게 공개되었다고 합니다.1991년 html 1.0부터 시작하여 2014년에 HTML5가 표준화되어 사용중입니다. 저도 서칭하다 알게되었는데요, HTML6가 출시 예정이라는 이야기가 있네요!HTML의 모든 것을 다루는것은 어려울거라 생각하지만, 기본적인 내용정도라면 해당 포스팅이 도움이 되시길 바랍니다.HTML이란?html은 Hyper Text Markup Language의 약자로, 웹페이지를 만들기 위한 Markup언어입니다. 이전 포스팅인 HTML과 CSS 그리고 JAVASCRIPT에서 다뤘듯이 엄밀하게 보자면 프로그래밍 언어는 아닙니다. Markup 언어입니다.Markup언어란 태그 등을 이용해서 문서나 데이터의 구조를 작성하는 언어 중 하나입니다. 비슷하게는 Markdown언어도 있습니다.Markup언어를 이용해 .html파일(또는 .htm파일)을 작성을 합니다. 해당 파일은 그저 텍스트 파일에 불과합니다.그러나 해당 파일을 웹 브라우저를 통해 열게 되면, 웹 브라우저가 html을 파악 후, View(화면)를 렌더링해줍니다. 그렇게 띄워진 하나의 화면이 웹 페이지, 여러개로 연결된 것이 웹 사이트 입니다.덧붙인 이야기 : 웹 페이지와 관련된 용어 모음 웹(Web)이란? 웹 페이지 하나가 하나의 html파일입니다. 그 이외에도 여러가지 파일이 웹페이지를 구성 할 수도 있습니다. 어찌되었든 우리는 하나의 페이지에서 다른 페이지로 이동합니다. 그렇게 계속 연결됩니다. 그렇게 연결되어있는 가상의 정보 공간을 월드 와이드 웹(World Wide Web), 줄여서 웹(Web)이라고 합니다. HTTP(HyperText Transfer Protocol)란? Web상에서 여러가지 문서를 주고받는데에 사용되는 정보규약(프로토콜, Protocol)입니다. 주로 html파일을 주고 받는데에 사용됩니다. HTTP를 통해 전달되는 자료는 http:로 시작하는 URL(인터넷 주소)을 이용하여 확인 할 수 있습니다. 이 프로토콜을 이용해서 여러페이지들이 연결되어 있습니다. 최근에는 https:으로 시작하는 URL도 많은데요, HTTPS(HyperText Transfer Protocol over Secure Socket Layer)는 http에서 보안을 더 강화한 정보규약(프로토콜)입니다. URL(Uniform Resource Locator)이란? 정보들(웹 페이지들)이 http라는 프로토콜로 연결되어 있는것이 웹(Web)입니다. 웹에는 엄청나게 많은 문서들이 연결되어 있습니다. 그 Web에서 자신이 필요한 사이트 즉 정보를 어떻게 찾을 수 있을까요? 바로 URL을 이용하여 찾을 수 있습니다. URL이 네트워크상의 정보들의 위치를 알려줍니다. http://www.google.com/, https://www.naver.com과 같이 사용됩니다. 자주 보시죠? 웹 브라우저 상단의 인터넷 주소창에서 볼 수 있습니다. 재밌는 사실! 일반적으로 http://www.google.com과 같이 URL을 작성하는데요. 사실 웹 페이지가 동작할때에 //는 필요가 없답니다. 그러니까, 사실 http:www.naver.com으로 주소를 쳐도 완벽히 정상적으로 작동을 하지요. //가 필요도 없는데 왜 사용될까요? 단순히 멋져보여서 넣었다고 합니다. ㅎㅎHTML 에디터(편집기)위에서도 이야기 했듯, html은 웹 브라우저를 통해 보면 웹 사이트가 펼쳐지지만, 그냥 파일을 까보면 텍스트 파일입니다. 그렇기 때문에 아무런 준비물없이 바로 작성이 가능합니다. 컴퓨터에 기본적으로 설치되어있는 아주 간단한 텍스트 편집기가 있습니다. 메모장인데요. 보통 메모장을 작성하고 나서 저장을 하게 되면 .txt파일로 저장되나, 문서를 작성 후 .html로 저장해주시면됩니다.하지만 사실 대부분은 메모장으로 html을 작성하지 않습니다. 실제 사용해보시면 알겠지만 되게 못생겼어요… 그리고 불편합니다.못생기고, 불편하는 말 이외에는 따로 할 말이 없네요. 보기에도, 작성하고, 수정할때도 불편하고, 멋지지 않아요.그래서 보기도 편하고, 작성하고 수정하는것도 눈에 잘 띄고, 색깔도 들어가있고 뭔가 좀 우와 멋있다 하는 그런 편집기(에디터)들이 많이 나와 있습니다.그 중에서도 독보적인 에디터가 있습니다. 바로 VSCode입니다.비슷한 이름으로 Visual Studio라고, 마이크로소프트의 통합 개발을 지원하는 IDE입니다. 프로젝트성 개발 툴이라는 성격을 띄고 있습니다.VSCode는 동일하게 마이크로소프트의 IDE입니다만, 파일 편집기의 느낌이 더 강합니다.에디터는 어느것을 사용하여도 됩니다만, 저는 VSCode를 사용합니다. 필요시에 따라 Visual Studio를 사용하기도 하나, 포스팅에서는 VSCode를 이용하도록 하겠습니다.VSCode가 없으신 경우 VSCode를 다운로드 링크버튼을 클릭해 다운로드 부탁드리겠습니다.HTML 기본먼저 시작 전, 기본적인 단어들을 알아보도록 하겠습니다. 태그(tag) : “&amp;lt;&amp;gt;”(꺽쇠 괄호)사이에 어떠한 단어나, 글자를 적어 시작과 끝을 알립니다. 시작은 “&amp;lt;&amp;gt;”, 끝은 “&amp;lt;/&amp;gt;”형식으로 알립니다.몇가지 예외 태그들은 종료태그”&amp;lt;/&amp;gt;”를 가지지 않습니다. 내용(content) : 텍스트(text). 말 그대로 내용. 속성(attribute) : 태그(tag)에는 여러가지 속성이 붙을 수 있습니다. 값(value) : 태그(tag)에 붙은 속성의 값입니다. 요소(elements) : 시작tag-내용-종료tag를 모두 아우릅니다. 주석(comment) : &amp;lt;!-- 주석입니다 --&amp;gt; 형식으로, 코드에는 영향을 주지 않는 Comment입니다.아래 이미지를 참고하면 쉽게 이해하실 수 있습니다.태그, 속성, 값은 여러가지가 존재합니다. 중첩으로도 사용할 수 도 있습니다.이번에도 순서대로 알아봅시다!태그(tag)_기본구조와 html파일 웹 브라우저로 열기html의 꽃. 태그(Tag)부터 알아보겠습니다.html은 구조를 명세하는 것인데요. 바로 Tag를 이용하여 구조 또는 형태를 만듭니다.html은 아래와 같은 구조를 가장 기본적으로 가집니다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;title&amp;gt;THIS IS A TITLE&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;This is a page&amp;lt;p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;메모장을 열어 위 소스를 복사 후 붙여넣고, 파일 형식은 모든 파일로, 파일명은 test.html로 설정 후 저장한 뒤, 해당 파일을 열어보시면 아래와 같이 확인 가능합니다.이때, .html파일의 연결 프로그램이 설정되어 있지 않다면, 파일을 실행 후, 연결 프로그램을 본인이 사용하는 웹 브라우저로 선택해줍니다.파일이 잘 열려 위 이미지와 동일하게 보인다면, 이제 구조를 하나씩 살펴봅시다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;title&amp;gt;THIS IS A TITLE&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;This is a page&amp;lt;p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; &amp;lt;!DOCTYPE html&amp;gt; : 해당 문서는 html로 해석해야 한다고 알립니다. 시작 태그만 존재하고 종료 태그는 없습니다. &amp;lt;html&amp;gt; &amp;lt;/html&amp;gt; : 해당 파일이 html이라고 정의 내립니다. &amp;lt;head&amp;gt; &amp;lt;/head&amp;gt; : &amp;lt;meta&amp;gt;(인코딩 타입), &amp;lt;title&amp;gt;(페이지 제목), &amp;lt;style&amp;gt;(CSS) 등의 태그가 들어갑니다. 대부분 웹 브라우저 화면상에는 나타나지 않지만, html에서 필요한 여러가지 정보들이 해당 태그 안에 들어갑니다. 다만, &amp;lt;title&amp;gt;태그는 브라우저 상단 페이지 제목으로 브라우저에서 표시됩니다. &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; : 브라우저의 실질적인 표시 영역입니다. &amp;lt;header&amp;gt;, &amp;lt;section&amp;gt;, &amp;lt;nav&amp;gt;, &amp;lt;article&amp;gt;, &amp;lt;footer&amp;gt; 등 여러가지 태그들이 사용되어 화면을 구성합니다.앞으로 사용 될 대부분의 태그는 시작 태그와 종료태그가 있습니다.&amp;lt;html&amp;gt;(시작태그)와 &amp;lt;/html&amp;gt;(종료태그)사이에 내용이 들어갑니다.예외적으로 몇가지 태그는 종료태그를 사용하지 않습니다.또, 몇가지 태그들은 &amp;lt;img src=&quot;test.png&quot; width=&quot;100&quot;&amp;gt;&amp;lt;/img&amp;gt;보다는 &amp;lt;img src=&quot;test.png&quot; width=&quot;100&quot; /&amp;gt;와 같이 종료태그를 축약해서 사용합니다.이제 다양한 태그들과 사용법에 관해 다루도록 하겠습니다.내용(content)내용을 사실 별 것 없습니다. 태그에 영향을 받는 일반적인 텍스트(Plain Text)입니다. 말 그대로 시작태그와 종료태그사이에 적히는 문자로써 태그에 따라 굵게, 기울임, 밑줄 등의 영향을 받습니다.&amp;lt;html&amp;gt; 안녕하세요&amp;lt;/html&amp;gt;라고만 적어도 웹 브라우저는 정확하게 내용을 띄워줍니다. 다만 “안녕하세요”라는 문구가 어디 위치하는지 명명해두지 않았기 때문에, &amp;lt;body&amp;gt;태그가 속하는, 즉 웹 브라우저 화면(View)에 해당 글자가 나타납니다.그렇지만 태그를 사용하여 정확하게 어디 위치에, 어떠한 모양으로, 무슨 글씨가 나오는지 통일감있게 작성할 수 있습니다.&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Dodev 하다 Blog&amp;lt;title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;안녕하세요&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;title의 위치에는 Dodev 하다 Blog, body안에는 &amp;lt;p&amp;gt;태그를 이용해 안녕하세요라는 글자가 나오도록 작성했습니다.조금 더 알아볼까요?&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;안녕하세요&amp;lt;/p&amp;gt; &amp;lt;b&amp;gt;안녕하세요&amp;lt;/b&amp;gt; &amp;lt;i&amp;gt;안녕하세요&amp;lt;/i&amp;gt; &amp;lt;p&amp;gt;안녕하세요 &amp;lt;del&amp;gt;취소선은 이렇게&amp;lt;/del&amp;gt; 적용합니다&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;안녕하세요 &amp;lt;ins&amp;gt;밑줄은 이렇게&amp;lt;/ins&amp;gt; 적용합니다&amp;lt;/p&amp;gt; &amp;lt;b&amp;gt;안녕하세요&amp;lt;/b&amp;gt; &amp;lt;br&amp;gt; &amp;lt;i&amp;gt;안녕하세요&amp;lt;/i&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;해당 코드를 실행하면 다음과 같습니다head태그는 굳이 필요없어서 지웠습니다. body태그 안에 여러가지 태그들이 있는데요, p 태그 : “단락을 나누는 줄바꿈” 태그입니다. 태그를 사용하여 단락을 나눕니다. b 태그 : “굵게” 태그입니다. i 태그 : “기울임” 태그입니다. -&amp;gt; 여기서 b태그와 i태그 사이에는 엔터(Enter)가 따로 없어 한 줄에 쭉 보여집니다. del 태그 : “취소선” 태그입니다. p태그와 혼용사용 했습니다. ins 태그 : “밑줄” 태그입니다. p태그와 혼용사용 했습니다. br 태그 : “줄바꿈” 태그입니다. 종료태그는 없으며, contents(내용)을 가지지 않습니다. b태그와 i태그사이에 줄바꿈을 했습니다.속성(attribute)과 값(value)태그는 그냥 사용할 수도 있지만 태그에 속성을 부여하여 사용할 수 있습니다. 웹 브라우저 화면에 보여지지는 않습니다. 시작태그안에 위치하며 &amp;lt;태그 속성=&quot;값&quot;&amp;gt;형태로 사용됩니다.태그에 따라 사용할 수 있는 속성은 각기 다릅니다.조금 전에 사용했던 p태그를 이용해서 예를 들자면&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p style=&quot;color:red;&quot;&amp;gt;안녕하세요&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;p태그안에 style속성을 부여하고 속성의 값은 color:red로 설정하였습니다. 해당 p태그 안의 내용(contents)는 빨간색 글자로 보여집니다.style속성의 값은 다중 사용이 가능합니다.&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p style=&quot;color:blue; font-size:15px;&quot;&amp;gt;안녕하세요&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;동일하게 p 태그에 style속성을 부여했지만 그 값은 2개가 됩니다.color:blue그리고 font-size:15px. p태그 안의 내용(contents)의 글자색은 파란색이고 글자(폰트) 사이즈는 15px으로 보여집니다.이렇듯 속성에서의 값의 중첩사용이 가능한 속성이 있습니다.다만, 꼭 주의해야 하는점은 각각의 값사이에는 ;(세미콜론)이 들어가야 합니다. 그래서 그냥 값 뒤에 항상 ;(세미콜론)을 붙이는 편이 좋습니다. 위의 예시처럼요!또한, 속성에서의 값이 꼭 1개여야만 하는 것들도 있습니다. 대표적으로 id속성이 있습니다.말이 나온 김에, id속성과 class속성을 알아봅시다.두 속성을 이용하여 CSS나 javascript를 좀 더 쉽게 사용할 수 있습니다.id속성과 class속성에는 모든 태그에 사용이 가능합니다.이전에도 이야기 했지만, id속성은 값을 단 하나만 사용할 수 있으며, 다른 태그들과 값이 같을 수 없습니다. 말 그대로 해당 태그에 id 값을 부여하는것이기 때문입니다.그러나 class속성은 다릅니다. id속성처럼 태그의 class 값을 부여하는것이지만 다중 값을 가질 수 있습니다.&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;section id=&quot;rose&quot; class=&quot;flower first&quot;&amp;gt; &amp;lt;h1&amp;gt;장미의 꽃말&amp;lt;/h1&amp;gt; &amp;lt;p id=&quot;red_rose&quot;&amp;gt;빨간 장미 : 불타는 사랑, 아름다움&amp;lt;/p&amp;gt; &amp;lt;p id=&quot;pink_rose&quot;&amp;gt;분홍 장미 : 사랑의 맹세, 망설임, 행복한 사랑&amp;lt;/p&amp;gt; &amp;lt;p id=&quot;yellow_rose&quot;&amp;gt;노란 장미 : 시기, 질투, 완벽한 성취&amp;lt;/p&amp;gt; &amp;lt;p id=&quot;white_rose&quot;&amp;gt;하얀 장미 : 청순, 순결, 새로운 시작&amp;lt;/p&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;section id=&quot;hyacinth&quot; class=&quot;flower second&quot;&amp;gt; &amp;lt;h1&amp;gt;히야신스의 꽃말&amp;lt;/h1&amp;gt; &amp;lt;p id=&quot;white_hyacinth&quot;&amp;gt;하얀 히야신스 : 마음 편히 당신을 사랑하는 행복&amp;lt;/p&amp;gt; &amp;lt;p id=&quot;red_hyacinth&quot;&amp;gt;빨간 히야신스 : 당신의 사랑이 나의 마음에 머뭅니다&amp;lt;/p&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;위와 같이id는 태그당 단 하나의 값을 가집니다. 다른태그의 id와 중복되면 안됩니다.class 태그는 다중 값을 가질 수 있습니다. 각각의 스페이스바로 한 칸 띄워서 사용하시면 됩니다.즉, id가 rose인 section태그의 class값은 flower와 first가 됩니다.내용이 없는(내용을 가질 수 없는), 태그들이 있습니다. br태그와 같이 종료태그가 없는 태그를 말하며 보통 빈 태그라고 말하기도 합니다.빈 태그 또한 속성을 가질 수 있습니다.img태그를 이용해볼까요?&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;img src=&quot;https://img.insight.co.kr/static/2018/02/12/700/vrk5z3a409vt02d3jvb7.jpg&quot; width=&quot;200px;&quot;&amp;gt; &amp;lt;p&amp;gt;귀여운 댕댕이&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;와 같이 사용됩니다. img태그는 빈 태그(내용이 없는 태그)입니다. 그렇지만 src속성을 이용해서 img태그가 표현해야 할 이미지 주소를, width속성을 이용해서 이미지의 가로 크기를 정하여 사용할 수 있습니다.주석(comment)프로그래밍에 관해 조금이라도 아신다면 주석이야 다 아시겠지만, 주석이 무엇인지 잘 모르시는 분들을 위해 끼워 넣습니다.주석이란, 작성된 html 페이지상 아무런 기능을하지않는 메모입니다. 페이지 상에서 아무런 역할이 없습니다.&amp;lt;!--주석입니다--&amp;gt;와 같은 형식으로 사용됩니다.사실 많은 초보자분들이 주석을 잘 쓰지 않습니다. 오히려 반대로 시간이 가면 갈 수록 많은 분들이 주석의 참된 의미를 알게되죠.주석은 메모입니다. 사실 혼자 모든 코드를 짜게 되면, 그래서 어느 위치에 어떤 코드가 어떤 역할을 하는지, 어디와 함께 연결되는지를 잘 안다면 메모는 필요가 없죠.협업을 하면서 이 코드가, 혹은 데이터가 무엇인지, 왜 있는지 등에 대한 정보가 필요합니다. 함께 일하는 다른분들을 위해서 현재 내가 작성하는 이 코드가 무엇인지, 왜있는지 등 여러가지 정보를 남겨야 합니다. 그렇지 않으면 매번 코드를 분석하거나 코드를 작성한 분께 가서 여쭤봐야할지도 모르죠.그래서 적어도 메모를 남겨두는 것입니다.또는, 처음부터 끝까지 작성한 코드가 있다고 생각해봅시다. 코드를 작성할때에는 문제가 되지 않습니다. 하지만 1년동안 그 코드를 보지 않았다고 생각해봅시다. 1년 뒤에 그 파일을 열어서 보면 작성할때와는 사뭇 다른 느낌을 받으실겁니다. 그렇기에 본인을 위해서도 주석을 잘 남겨둬야하죠.주석의 사용은 아래와 같이 사용 가능합니다.&amp;lt;!--서브 내용 시작--&amp;gt;&amp;lt;div class=&quot;sub-contents&quot;&amp;gt; ...&amp;lt;/div&amp;gt;&amp;lt;!--서브 내용 끝--&amp;gt;html 문서를 작성하다보면 div태그를 자주 보게 되실겁니다. 이 태그는 자주 사용되어서 중첩되는 경우도 많아서 끝태그가 어떤 div태그를 닫는것인지 알기 어렵습니다. 그래서 어떤 div태그가 닫히는지 아래에 명시하기도 합니다.html에서는 &amp;lt;!-- --&amp;gt;형식으로.CSS와 javascript에서는 /**/(여러줄 주석) 또는 //(한줄주석) 형식으로 사용합니다.마무리와 세상에! 포스팅이 너무 길어져 버렸습니다 ㅠㅠ 하지만 아직도 많은 내용이 남아있다고 생각하기에, 좀 더 다뤄봤으면 합니다.하지만 모든 내용을 다룰수는 없다고 판단하여, 다음 포스팅은 HTML에서 많이 사용되는 태그 28선에 관해 다뤄보고자 합니다.긴 포스팅 읽어주셔 감사합니다!" }, { "title": "HTML과 CSS 그리고 JAVASCRIPT", "url": "/posts/What-is-html-and-css/", "categories": "html, javascript", "tags": "html, css, javascript", "date": "2021-10-12 10:59:00 +0900", "snippet": "블로그 커스터마이징 하기블로그 커스터마이징 하기두서이전 포스팅 이였던 블로그 커스터마이징에서 조금 옆으로 새어나와 html, css 그리고 javascript를 이야기 해보려고합니다.사실 저도 html, css, javascript를 모두 아는것은 아닙니다. 제가 알고 있는 기본적인 개념을 이곳에서 풀어가보려고 합니다.편하게 읽어주시고, 미흡한 부분은 지적해주시길 바랍니다. 에러가 난다면 함께 고민 할 수 있으면 합니다.그런고로 언제든 덧글 달아주시거나, 연락주세요. 참고 : 입문자용으로 작성하였습니다.!HTML, CSS 그리고 javascriptHTMLHyper Text Markup Language의 약자로, 웹페이지를 만들기 위한 Markup언어입니다. 프로그래밍 언어로 알고 계시는 분들이 있으십니다만, 정확하게는 프로그래밍 언어는 아닙니다. “웹 페이지의 구조가 이렇게 생겼습니다.”라고 웹 브라우저에 알려주는 markup문서입니다.html을 시작하기 위해서는 두가지 요소를 꼭 알아야 합니다. elements(엘리먼츠)와 tag(태그)입니다. 이 또한 혼용해서 사용하는 경우가 많으나, 정확히는 서로 두가지는 다른 것 입니다.우선 tag란 “&amp;lt;&amp;gt;”(꺽쇠 괄호)사이에 어떠한 단어나, 글자를 적어 시작과 끝을 알리는 녀석입니다.elements란, 시작tag-내용-종료tag를 모두 아우르는 녀석입니다.아직까지 제대로 모르겠지요, 예를 들어 설명하자면,&amp;lt;p&amp;gt;안녕하세요 Dodev 하다 입니다.&amp;lt;/p&amp;gt;위에서, &amp;lt;p&amp;gt;는 시작 tag입니다. &amp;lt;/p&amp;gt;는 종료 tag입니다. &amp;lt;p&amp;gt;~&amp;lt;/p&amp;gt;까지 전체 한 문장 전체는 elements(요소)라고 합니다.즉, 위 예시에서는 시작태그, 종료태그 각각 1개씩 총 2개의 tag가있고, elements는 1개이지요.자, 우선 이정도로만 할까요! HTML은 웹페이지를 만들기 위한 언어이고, HTML은 구조를 정의하는것입니다.CSSCascading Style Sheets의 약자로, 말 그대로 스타일 시트 입니다. HTML로 뼈대(구조)를 잡고나서, 거기에 살을 덧붙이는것이라고 생각하시면 될것 같습니다.CSS는 글꼴, 색, 이미지, 모양, 크기, 너비, 높이 등등 여러가지 요소들의 디자인을 정의해둔것입니다. html과 연결하여 사용됩니다.사실 예전에는 html자체에서 뼈대를 잡으면서, 동시에 페이지를 꾸미는 일을 해야만 했습니다. 그러다보니 여간 번거로운 일이 아니였습니다. html을 아주 조금이라도 수정하려고 하면, 전체를 다시 봐야하기 때문이였죠.그래서 World Wide Web Consortium (W3C)이라는 기관이 설립되어, 문서작업과 꾸미는 작업을 두가지로 분리하여 웹 표준을 정의해주었답니다.문서를 고쳐야 한다면 디자인은 신경쓰지 않고 contents를 수정합니다. 디자인의 변경이 필요하면 css파일을 확인하여 수정할 수 있습니다.CSS는 HTML이 만들어둔 구조에 디자인을 입히는것으로 생각해주시면 됩니다.Style 적용 방법은 3가지가 있습니다. tag에 sytle을 속성처럼 사용(In-line) html 문서안에 style 태그를 사용(Internal) css파일을 별도로 만들어 html과 연결하여 사용(External)그 중 마지막을 사용하는것이 좋습니다. 권장사항입니다! 사용방법은 이후에 다루도록 하겠습니다!CSS는 더 발전하여 SASS(Syntactically Awesome Stylesheets)가 나오게 됩니다만, 이번 게시글에서는 따로 다루지 않겠습니다.javascript (+jquery, Ajax)javascript란, 정적 페이지를 동적 페이지로 만들어주는 녀석입니다. 객체 기반의 스크립트 프로그래밍언어 입니다. 줄여서 js로 부르기도 합니다. 앞에 ‘java’라는게 붙어있어서 많이들 오해하시는데, ‘java’와 ‘javascript’는 엄연히 다릅니다! 전혀 다릅니다!!js는 보통 엔드유저단에서 동작하나, Node.js와 같은 프레임워크를 사용하면 서버 측 프로그래밍이 가능합니다. 프로그래밍 언어이나 별도의 컴파일러를 설치하지 않고도 웹 페이지에서 바로 정상작동 하는데, 이는 웹 브라우저 자체에서 js를 인식하고 컴파일 해주기 때문입니다!정적 페이지를 동적 페이지로 만들어주는 녀석이라고 했는데, 여기서 정적 페이지란, 컴퓨터에 있는 텍스트파일을 단순히 열어 보기만 하는것과 같은 페이지 입니다. html(+css)로만 작성된 웹 페이지가 그렇지요. 2000년대 초반만 해도 정적 페이지가 꽤 많았습니다만, 현재에는 찾아보기가 어렵지요. 대부분의 웹 페이지는 동적 페이지입니다.동적 페이지란 정적페이지에 여러가지 변수들에 의해 작용을 받아 사용자가 보는 페이지가 달라지는, 동적으로 변하는 페이지입니다. 아주 간단한 예를 들어, 새로고침할때마다 변하는 시간을 보여주는 페이지 또한 동적 페이지 입니다.js와 함께 거론되는 jquery(제이쿼리)란, javascript 라이브러리(library)입니다. 문서 탐색, 문서 조작, 이벤트 처리 등 javascript를 더 편하게 사용하기 위해 나온 녀석입니다.비슷하게 많이 언급되는 Ajax(에이젝스 또는 아작스)도 있습니다. Ajax 또한 javascript library입니다. Asynchronous Javascript And Xml의 줄임말이며, 특정 데이터를 불러올때, 그것을 위해 웹 페이지 전체를 새로고침(reload)하지 않고, 해당되는 데이터만을 갱신할 수 있도록 해줍니다.Vanilla JS(바닐라 자바스크립트, 바닐라 제이에스)라고 하는 녀석도 종종 눈에 띄는데요, 별도의 프레임워크나 라이브러리를 사용하지 않고, 자바스크립트를 사용하는것을 뜻합니다.이것도 이 정도만 하겠습니다. 너무 많은 양이라 하고싶은 말이 잔뜩있지만 천천히 하도록 할게요.자바스크립트(javascript)는 정적으로 작성된 HTML(혹은 HTML+CSS)를 동적 페이지로 작동하도록 해 주는 것입니다.마무리어느정도 개념이 잡히셨길 바랍니다. 아직도 잘 모르셔도 괜찮습니다. 개념이 잡히셨다면 ‘음, 이걸 어떻게 쓸까?’하고 생각해주시고 아직 잘 모르시겠다면 ‘아 모르겠다 일단 해봐야 알 것 같아’라고 생각해주시길 바랍니다.네, 어찌되었든 실전으로 들어가야 하는 단계로 넘어왔습니다. 다음 포스팅에서는 각각을 좀 더 자세히 알아보고 사용해보도록 합시다. 감사합니다!" }, { "title": "블로그 커스터마이징 하기", "url": "/posts/Customizing-Blogs/", "categories": "GitHub Blog", "tags": "GitHub Blog, How to, Study", "date": "2021-10-04 10:37:00 +0900", "snippet": "초보자를 위한 GitHub Blog 만들기 시리즈초보자를 위한 GitHub Blog 만들기 - 1초보자를 위한 GitHub Blog 만들기 - 2초보자를 위한 GitHub Blog 만들기 - 3초보자를 위한 GitHub Blog 만들기 - 4포스팅 작성하기 시리즈첫 포스팅 작성하기 - 마크다운(Markdown)첫 포스팅 작성하기두서깃허브 블로그도 어느정도 블로그에 모습을 갖췄습니다. 제작자가 만들어둔 테마 그 자체만으로도 예쁩니다만, 그래도 그 테마를 그대로 쓰자니 내 마음에 들게 예쁘게 꾸미고 싶기도 한데 이걸 어떻게 또 해야하나.. 그러면 뭘해야하나.. html? css? js? jquery? 아웅 왜이렇게 힘든게 많아… 아우 귀찮아..사실 간단하다면 간단하고, 어렵다면 어려울 수도 있습니다. 구조를 완벽히 파악하고, 원하는 코드라인이 무엇인지, 어디에 해당 코드가 있는지 모두 안다면 쉽겠지요. 하지만 저는 내가 뭘 바꾸고싶은지만 알고 있는 분들을 위해 작성하도록 하겠습니다. 뭘 바꾸고싶은지도 모른다면 적어도 “이 버튼 색깔을 바꾸고 싶어”, “여기는 이렇게 나오면 좋을것같아”와 같이 희망사항을 대충 생각해오시면 될 것 같습니다.주먹구구식으로 보이겠지만 이렇게라도 본인의 마음에 쏙 드는 페이지를 만들 수 있다면 좋겠습니다. 입문자에게 깃헙 블로그의 문턱을 낮춰드리고싶습니다.참고로 jekyll-theme-chirpy테마를 기준으로 작성합니다. 테마마다 구조나, 코드가 모두 다르기 때문에 유의 부탁드립니다.나는 이 옵션이 있는데 왜 이 블로그에서는 다뤄주지 않지? 나는 이 옵션이 없는데 도대체 뭘 말하는 거지?라고 생각하실 수 있습니다.블로그에 적혀있지 않으나 본인이 가지고 있는 옵션의 경우에는 테마 제작자 repository의 README.md 참고하여 수정해주시고, 블로그에는 적혀있지만 본인이 가지고 있지 않는 옵션의 경우에는 스킵하시거나 테마 제작자 repository의 README.md 참고하여 수정해주시면 됩니다.바꾸고자 하는 곳을 명확하게 짚는다.앞서 말했던 것 처럼 제가 현재 사용중인 jekyll-theme-chirpy테마를 기준으로 작성합니다.우선 본인이 사용중인 테마의 데모 페이지가 있을것입니다. 그 데모 페이지를 거의 그대로 현재 쓰고 계실건데요. 제가 사용중인 테마의 데모 페이지는 jekyll-theme-chirpy Demo Page입니다. 위 사진과 같이 제가 쓰는 테마는 두 가지 모드를 지원합니다. light모드, dark모드. 어느 모드 할 것 없이 군더더기 없이 깔끔하고 컬러도 예쁩니다.하지만 저는 여기서 프로필 사진, 블로그 소개말, favicon, 좌측 사이드 바의 컬러, 모드별 하이라이트 컬러 정도를 변경하고 싶었습니다.하다가 보면 추가되거나, 변경, 삭제 되는 흐름이 있을겁니다. 그치만 저는 처음부터 “이걸부터 해야만 한다!”보다는 처음에는 “어디가 어떤 모양이면 좋겠어” 혹은 “이건 다른 색 / 이미지라면 좋겠어”와 같은 명확한 생각이 필요하다고 생각합니다.그렇지 않다면 어딜 어떻게 바꿔야 하는지 조차 알 수 없기 때문이죠. 본인의 테마에서 변경하고 싶은 점이 어느정도 나왔다면 시작할 수 있습니다!프로필 사진과 블로그 소개말 변경사실 이 부분은 이전 포스팅에서 다뤘던 부분입니다.대부분의 지킬 테마는 _config.yml파일안에 title, tagline, avatar라고 하는 옵션들이 있습니다.이때 title은 블로그 제목, tagline은 서브타이틀(블로그 소개말), avatar는 프로필 사진 옵션입니다.작성시 특수문자가 들어가면 오류가 발생하는 경우도 있습니다. 제목 및 소개말을 작성하였는데 깨지거나, 정상적으로 보이지 않는 경우에는 특수문자를 빼고 작성해보시길 바랍니다.avatar 이미지가 제대로 보이지 않는 경우에는 이미지의 경로가 올바른지 확인하시면 됩니다.favicon파비콘 또는 패비콘입니다. 웹 브라우저 상단에 사이트 제목과 함께 아이콘이 뜨지요. 그 아이콘을 favicon이라고 합니다.Real Favicon Generator로 접속합니다. Select your Favicon image버튼을 클릭 후 favicon으로 사용하고자 하는 이미지를 업로드 합니다.잠시 기다리면 여러가지 옵션을 변경 할 수 있는데, 필요한 옵션들을 선택/변경 후 스크롤을 하단으로 쭉 내리시면 Generate your Favicons and HTML code 버튼을 눌러줍니다.다음으로 Favicon package버튼을 누르시면 .zip파일이 다운로드 됩니다.해당 압축파일을 푼 다음, 그 안에서 browserconfig.xml site.webmanifest위 두 개의 파일을 삭제 합니다.나머지 파일들은 assets/img/favicons/ 경로안에 넣어줍니다.넣어준 뒤 보면 아까 삭제했던 browserconfig.xml과 site.webmanifest가 보이는데요. 이것은 디폴트 파일이라 아까 삭제한것과는 다른 파일입니다. 보여야 정상입니다!그 다음, /_includes/favicons.html파일을 열어줍니다. 들어가시면 이전에 설정되어있는 favicons정보들이 있습니다. 내용을 변경해야 하기 때문에, 다음과 같이, assets/img/favicons/ 경로에 있는 파일을 추가해주시면 됩니다.사이즈와 파일명은 다를 수 있기 때문에, 잘 확인하시길 바랍니다.좌측 사이드 바의 컬러 변경jekyll-theme-chirpy Demo Page에서 좌측에는 사이드바(sidebar)가 존재합니다. 프로필이미지, 소개글, 메뉴 등이 있는 좌측 부분을 말하지요.해당 부분의 컬러는 light mode일때에는 베이지색, dark mode일 경우 검정에가까운 회색을 띕니다. 저는 우주컨셉이 좋아서, 색을 교체하기보다는 이 부분을 이미지로 넣고 싶었습니다. 이 부분이 도대체 어디에 있는지 어떻게 찾을까요?요리조리 연결되어있는 부분을 소스로 찾아내어서 변경 할 수도 있습니다만, 그냥 직관적으로 찾고싶다면 브라우저의 개발자 모드를 이용해서 쉽게 찾을 수 있습니다. 개발자 모드는 현재 사용하시는 브라우저에서 F12버튼을 눌러 바로 띄울 수 있습니다.사용중인 테마의 Demo페이지 말고, 본인의 깃헙블로그페이지로 들어간 뒤, F12버튼을 눌러 개발자 모드(DevTools)를 띄워줍니다.아래와 같이 나오실텐데, 그 중 우측 상단 &amp;gt;&amp;gt;버튼을 눌러 Dock style을 변경 할 수 있습니다.개발자 모드(DevTools) 중 상단에 요소(Elements)를 선택하시면 &amp;lt;html&amp;gt;태그로 시작되는 부분을 보실 수 있습니다. 각각의 요소에 마우스를 올리면 해당 태그가 어디부분을 구성하고 있는지 보실 수 있는데요. 마우스를 한줄 한줄 내려가면서 수정하고싶은 부분을 찾아봅니다.저는 &amp;lt;body&amp;gt;태그 안의 &amp;lt;div id=&quot;sidear&quot; ...부분이 해당됩니다. 해당 부분을 더블 클릭하면 태그가 열립니다.요소를 찾았다면, 그 태그를 클릭해보면 우측에 스타일(style)부분을 찾으실 수 있는데, 여기에서 보시면 #sidebar{... background: var(--sidebar-bg); ...}을 찾을 수 있습니다.css파일에서 해당부분을 찾아야 하는데, #sidebar는 sidebar를 id로 가지는 요소의 css를 정의해 둔 것입니다. background: var(--sidebar-bg);를 그대로 복사하여서 VSCode에서 검색해보면, 아래와 같이 찾을 수 있습니다.저는 이미 sidebar 배경색을 이미지로 변경하였기 때문에 저렇게 뜨는데, 더 많거나 혹은 다르게 보여질 수 있습니다.해당 파일을 열어보면, background속성이 색깔이 아닌 --sidebar-bg라고 적혀있습니다. 색을 변수로 담아두었습니다. 다시한번 동일하게 –sidebar-bg를 검색해보시면, dark-typography.scss와 light-typography.scss에서 –sidebar-bg가 rgb로 설정되어 있는 것을 확인 할 수 있습니다.컬러만 바꾸고싶으시다면 dark-typography.scss와 light-typography.scss에서 각각의 rgb색을 변경하여 입력해줍니다.단순 컬러가 아닌 그라데이션을 사용하고 싶으시다면 CSS Gradient과 같은 사이트를 참고하여 사용할 수 있습니다.저는 컬러나 그라데이션 말고 이미지를 넣고 싶었기 때문에, dark-typography.scss와 light-typography.scss에 정의되어있는 –sidebar-bg부분을 지우고(주석처리하고) 아래와 같이 변경해주었습니다.참고로 /*___*/형식으로 적어주시면 주석처리 됩니다. /*background: var(--sidebar-bg);*/ background-image: url(&#39;/assets/img/sidebar-bg-img.jpg&#39;); /*사용하고 싶은 이미지 경로*/ background-size: cover; /*이미지의 size가 보여질 부분의 사이즈와 다른 경우에는 이미지 크기를 꽉차게 만든다 */ background-repeat: no-repeat; /*이미지의 size가 보여질 부분의 사이즈와 다른 경우 이미지가 반복하여 나오는데, 반복하지 않겠다*/모드별 하이라이트 컬러 변경개발자 모드에서 변경이 필요한 요소를 찾고, VSCode에서 검색하여 수정하는 방법이 감이 잡혔다면 모드별 하이라이트 컬러를 변경하는것도 매우 쉽습니다!페이지에 있는 글자들이 모두 검정색 글자는 아닙니다. 링크가 걸려있거나, 어떠한 구역 혹은 글자는 색깔을 가지고 있습니다. 그것이 바로 하이라이트 컬러입니다.테마 고유의 색도 예쁘긴 합니다만, 저는 우주!컨셉이 좋아서, 색깔들을 보라색으로 변경하려고 합니다. light mode일때에는 그냥 그대로 두고, dark mode일 때 하이라이팅 컬러를 바꾸려고 해요.동일하게 본인의 깃헙블로그페이지로 들어간 뒤, F12버튼을 눌러 개발자 모드(DevTools)를 띄워줍니다. 하이라이트 컬러는 큰 요소가 아니기 때문에, sidebar부분을 찾는 것 처럼 하면 되게 오래 걸립니다.그렇기 때문에 텍스트를 이용해서 검색하도록 하겠습니다.저는 다크모드의 하이라이트 컬러를 바꿀거라 다크모드에서 개발자 모드로 진입했습니다.화면에 보시면 “Getting Started”, “Enable Google Page Views”, “Customize the Favicon”과 같이 포스팅 제목에 색이 들어가 있습니다. 해당 부분을 변경하려고 하기 때문에, 개발자 모드쪽에서 Ctrl+f를 눌러 포스팅 제목 중 하나를 검색합니다.저는 Getting Started라고 검색하도록 하겠습니다.검색하게 되면 해당부분의 요소가 맞는지 확인 후, style을 확인합니다.#search-results a, .post-content a:not(.img-link), .post-meta a, a{ color: var(--link-color);}라고 확인되는데요, color: var(--link-color);를 VSCode에서 검색해봅시다.확인은 되지만, sidebar부분과 같이 color가 rgb 등 색 지정이 되어있지 않고 변수로 지정되어 있습니다.그렇기 때문에 다시 --link-color를 재검색 해봅니다. 그러면 아래와 같이 해당 변수명이 어떤 컬러인지 확인이 가능한데요, 저는 다크모드쪽만 변경할거라 다크모드쪽 link-color를 수정하여 저장합니다.local로 확인해보기포스팅 작성과 마찬가지로, local에서 먼저 오류나 에러가 없는지, 원하는데로 수정이 잘 되었는지 등을 확인합니다.Start Command Prompt with Ruby를 실행합니다. 아래는 저의 경로로 예를 든것이며, 본인의 git Clone경로(폴더)로 이동합니다. cd C:\\Users\\wlqmf\\Documents\\GitHub\\wlqmffl0102.github.ioRuby Prompt에서 명령어를 입력 bundle exec jekyll serve정상적으로 확인된다면 http://127.0.0.1:4000/ 또는 http://localhost:4000/으로 접속하여 변경사항들을 확인합니다.깃헙에 업로드하기정상적으로 로컬서버에서 확인이 된다면, 깃헙에 업로드 하여 본인의 실제 깃헙 블로그에 변경사항을 적용해야 합니다.Github Desktop에서, 좌측 하단부에 commit 내용을 작성 후 commit to main이라는 버튼을 클릭한 뒤, Push origin버튼을 눌러주시면 됩니다. 5~10분 뒤 깃헙 블로그에 정상적으로 변경사항이 확인된다면 끝입니다!마무리블로그 커스텀에 관한 포스팅을 작성하였는데요, 사실 html이나 css 심지어는 javascript까지도 알아야 커스텀을 자유롭게 할 수 있습니다. 초보자들에게는 꽤 어려울 수도 있고, 주먹구구식으로 해야 할 수도 있습니다.그래서 html이나 css등 여러가지 이야기를 풀어나가면 좋겠다는 생각이 드는데, 제 역량으로는 엄청나게 멋지고, 대단한 포스팅을 적을수는 없다고 생각합니다.다만 제 바램은 초보자들도 쉽게 문턱을 넘어 자신만의 Github Blog를 만들었으면 하는 것 입니다.포스팅은 계속 됩니다!" }, { "title": "첫 포스팅 작성하기", "url": "/posts/WritingThe-First-post-2/", "categories": "GitHub Blog", "tags": "GitHub Blog, How to, Study", "date": "2021-10-03 20:10:00 +0900", "snippet": "초보자를 위한 GitHub Blog 만들기 시리즈초보자를 위한 GitHub Blog 만들기 - 1초보자를 위한 GitHub Blog 만들기 - 2초보자를 위한 GitHub Blog 만들기 - 3초보자를 위한 GitHub Blog 만들기 - 4이전 포스팅첫 포스팅 작성하기 - 마크다운(Markdown)첫 포스팅 작성하기이전 포스팅에서 이야기 하였듯, 네이버나 티스토리 등 여러 플랫폼의 블로그와는 글쓰기 방법이 조금 다릅니다.특정 위치에 md(markdown)파일을 생성하면, 깃헙에서 해당 md파일을 이용해 html페이지로 변환해줍니다.그렇게 포스팅이 작성되어 갑니다.그렇기 때문에 이전 포스팅에서 markdown 문서 작성방법에 관해 포스팅을 진행했습니다.자, 이제는 포스트를 게시할것인데요, 일반적으로 지킬의 구조는 아래와 같습니다. . ├── _config.yml ├── _data │ └── members.yml ├── _drafts │ ├── begin-with-the-crazy-ideas.md │ └── on-simplicity-in-technology.md ├── _includes │ ├── footer.html │ └── header.html ├── _layouts │ ├── default.html │ └── post.html ├── _posts │ ├── 2007-10-29-why-every-programmer-should-play-nethack.md │ └── 2009-04-26-barcamp-boston-4-roundup.md ├── _sass │ ├── _base.scss │ └── _layout.scss ├── _site ├── .jekyll-metadata └── index.html # 올바른 머리말을 가진 &#39;index.md&#39; 도 가능여기에서 눈 여겨 보아야 하는 부분은 _posts입니다. 말 그대로 포스트가 올라가는 공간입니다.지킬테마를 사용하는 모든 깃헙 페이지에는 _posts라는 폴더가 있습니다. 그곳에 md파일을 생성 하는 것이 포스팅의 시작입니다._posts폴더 안에, 디폴트로 여러가지 문서가 있을 수 있습니다._posts폴더 안의 md파일의 이름은 YYYY-MM-DD-TITLE.md와 같은 형식을 가집니다.그렇다면 파일을 하나 생성해볼까요? 필자의 현재일자,일시를 기준으로 2021-10-03-WritingThe-First-post-2.md파일을 하나 만듭니다.새 파일이기 때문에 안에는 어떠한 내용도 들어있지 않습니다.해당 md파일이 블로그의 “포스트”임을 알리기 위한 내용이 처음으로 들어가야 합니다.바로 YAML타입 머리글 인데요, 기본적으로 아래와 같이 쓰이며, 여러가지 옵션들이 있습니다.---layout: posttitle: 첫 포스팅 작성하기---제가 사용하는 테마는 jekyll-theme-chirpy테마는 기본적으로 아래와 같은 포맷을 사용한다고 나와있기에, 해당 가이드 라인에 따라 작성하고 있습니다. 테마마다 옵션들이 다르기 때문에, 테마의 제작자 Repository에 방문하거나 디폴트 문서 중 나와있는 가이드라인을 참고하시면 됩니다. 가장 맨 처음에 해당 내용을 기입 후, 그 아래에 포스팅 내용을 작성하시면 됩니다.---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase---참, date항목에 “YYYY-MM-DD HH:MM:SS +/-TTTT”으로 나와있는데, 이중 +/-TTTT이라는게 붙어 있습니다. 타임존 오프셋이라고 하는데, 별 것 없다. 대한민국은 보통 +09:00으로 작성합니다. 더 알고 싶다면 이 블로그 포스팅에서 자세하게 알아 볼 수 있습니다.마크다운 문서 편집기(Markdown Editor)본격적으로 markdown언어를 이용하여 게시글을 작성하려고 하나, 아직 막막하신 분들이 많으실겁니다.그래서 여러가지 에디터를 소개하고자 합니다. Typora : 마크다운 에디터를 처음 접하게 된 프로그램입니다. 설치형이고, 깔끔하고 많은 사람들이 편하게 사용하고 있습니다. 그렇지만 저는 설치형보다 웹형의 에디터가 조금 더 편해서, Typora는 초반에 잠깐 사용하였습니다. StackEdit : Typora 다음으로 접하게 된 스택 에딧입니다. 웹 형이고, 보통 저는 스택에딧을 참고하곤 합니다. DILLINGER 이정도 소개하도록 하겠습니다. 이외에도 엄청나게 많은 에디터 및 마크다운 문서 변환 프로그램/사이트가 존재합니다.찾아보시다가 편하신 것을 선택해서 사용하시면 될 것 같습니다.다만, 유의해야 하는점은 Markdown은 표준이 없기 때문에 에디터에서 작성한 모습 그대로 블로그에 표현되지 않을 가능성도 존재합니다. 꼭 유의하시길 바랍니다.local로 확인해보기포스팅을 작성하였다면 생각했던데로 포스팅이 잘 나오는지, 문제가 되는점은 없는지 등 확인을 해야 합니다.확인하지 않고 그대로 깃헙에 커밋, 푸시를 하게 되면 어떤 문제가 발생하는지 알 수 없고, 커밋, 푸시 후 또 수정, 다시 커밋, 수정 … 귀찮습니다! 그래서 우선 로컬로 띄워보겠습니다. 어렵지는 않고, 이전에도 해봤던 과정이기 때문에 크게 문제될 것 없습니다.Start Command Prompt with Ruby를 실행합니다. 아래는 저의 경로로 예를 든것이며, 본인의 git Clone경로(폴더)로 이동합니다. cd C:\\Users\\wlqmf\\Documents\\GitHub\\wlqmffl0102.github.ioRuby Prompt에서 명령어를 입력 bundle exec jekyll serve정상적으로 확인된다면 http://127.0.0.1:4000/ 또는 http://localhost:4000/으로 접속하여 포스팅에 문제가 없는지 확인합니다.jekyll-theme-chirpy기준으로, 포스팅 파일 제목이 한글로 작성 된 경우, local에서 home화면에서는 게시글 목록이 확인되나, 해당 게시글을 보려고 하면 404에러가 떨어집니다. 인코딩과정을 거쳐 md파일에 한글이 있는 경우에도 정상적으로 작동할 수 있도록 하는 방법은 분명히 있을겁니다. 저는 귀찮아서 그냥 md파일 이름을 모두 영어로 작성하였습니다.포스팅확인이 정상적으로 된다! 내가 생각했던데로 나온다! 하시면 커밋, 푸시를 하시고, 생각했던데로 나오지 않는 점들을 하나씩 수정하여 정상적인 포스팅으로 수정작업을 진행해줍니다.포스팅의 내용만 변경 할 경우에는 local jekyll 서버를 재시작 하지 않아도 괜찮습니다만, _config,yml 등의 설정파일을 변경하는 경우에는 local jekyll 서버를 꼭 재시작해주셔야 합니다.local jekyll server가 실행중인 Ruby Prompt에서 Ctrl+C를 눌러 서버를 중지했다가, 다시 bundle exec jekyll serve명령어를 입력하여 재시작 가능합니다.참고로 bundle exec jekyll serve명령어를 나눠서 사용도 가능합니다.local server에서 _site파일 생성 (사이트 구축) jekyll build소스 파일이 변경될 때마다 사이트를 빌드하고 로컬에서 제공 jekyll serve깃헙에 업로드하기정상적으로 로컬서버에서 확인이 된다면, 깃헙에 업로드 하여 본인의 실제 깃헙 블로그에 포스팅을 업로드해야 합니다.Github Desktop에서, 좌측 하단부에 commit 내용을 작성 후 commit to main이라는 버튼을 클릭한 뒤, Push origin버튼을 눌러주시면 됩니다. 5~10분 뒤 깃헙 블로그에 정상적으로 포스팅이 보인다면 끝입니다!" }, { "title": "첫 포스팅 작성하기 - 마크다운(Markdown)", "url": "/posts/WritingThe-First-post-1-Markdown-Grammar1/", "categories": "GitHub Blog", "tags": "GitHub Blog, How to, Study", "date": "2021-10-02 11:07:00 +0900", "snippet": "초보자를 위한 GitHub Blog 만들기 시리즈초보자를 위한 GitHub Blog 만들기 - 1초보자를 위한 GitHub Blog 만들기 - 2초보자를 위한 GitHub Blog 만들기 - 3초보자를 위한 GitHub Blog 만들기 - 4두서힘들었던 블로그 생성을 다 마치고 나서도 끝은 아닙니다. 블로그가 생겼으니 블로그를 운영해야 하지요.지킬테마+깃헙페이지 를 이용해 만든 깃 블로그는 md파일을 사용하여 블로그 포스팅을 작성, 업로드 할 수 있습니다.네이버 블로그, 티스토리, 브런치 등등.. 여러 플랫폼에는 블로그 자체에 “새글쓰기” 혹은 “새 게시물 작성”등의 버튼이 있고,포스팅을 위한 에디터가 나와, 블로그 자체에서 글을 씁니다.하지만 깃헙페이지는 그런식으로 운영되지는 않습니다. markdown문서를 작성하여 새 포스팅을 작성 할 수 있는데, 이번 것도 차근차근 시작하겠습니다!마크다운(Markdown(.md / .markdown)) 이란? Markdown은 텍스트 기반의 마크업언어로 2004년 존 그루버에 의해 만들어졌으며 쉽게 쓰고 읽을 수 있으며 HTML로 변환이 가능하다. 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용하여 웹에서도 보다 빠르게 컨텐츠를 작성하고 보다 직관적으로 인식할 수 있다. 마크다운이 최근 각광받기 시작한 이유는 깃헙(https://github.com) 덕분이다. 깃헙의 저장소(Repository)에 관한 정보를 기록하는 README.md는 깃헙을 사용하는 사람이라면 누구나 가장 먼저 접하게 되는 마크다운 문서였다. 마크다운을 통해서 설치방법, 소스코드 설명, 이슈 등을 간단하게 기록하고 가독성을 높일 수 있다는 강점이 부각되면서 점점 여러 곳으로 퍼져가게 된다.웹을 이루는 가장 기초적인 구성 요소인 HTML이라고 하는 녀석이 있습니다. HTML은 Hyper Text Markup language의 약자 입니다.여러가지 많은 설명들이 있습니다만, 간단히 이야기 하자면 Markup은 텍스트를 이용해 구조를 만드는 것 입니다. 일반 plain text와 태그를 이용하여 정의를 하는 것 입니다.그런데, 이 마크업(markup)문서는 작성하는법이 귀찮고 까다롭습니다. 그렇기 때문에 더 쉽게 페이지를 작성 할 수 있는 문법이 나오게 되었는데, 그것이 바로 마크다운(Markdown) 입니다.Markdown이란, plain text와 몇가지 특수기호를 이용해서 서식이 있는 문서를 만드는 것 입니다.간단한 사용, html로 변환가능, 버전 관리 용이 등의 이점이 있습니다.그러나 표준이 없어 어떤 에디터를 사용하느냐에 따라 다른 결과물이 나올 수 있습니다.아직까지도 잘 이해가 안 갈 수 있습니다.다만, 중요한점은 Markup과 Markdown은 서로 상충하는것이 아니라는 점입니다.Markup과 Markdown은 동일한 행위를 다른 방식으로 진행하는 것 뿐이지요.아래의 설명을 보시면 더 편하게 이해가실 것 입니다.Markup(HTML)에서는, 어떠한 문장 또는 단어를 “굵게”처리하기 위해서는안녕하세요. 저는 &amp;lt;b&amp;gt;Dodev-하다&amp;lt;/b&amp;gt; 입니다.와 같은 형식으로 사용해야 합니다. 태그 사이에 있는 것은 굵게 표시 한다. 라는 뜻이예요.하지만 Markdown에서는안녕하세요. 저는 **Dodev-하다** 입니다.와 같은 형식으로 사용합니다. ** 사이에 있는 것은 굵게 표시한다. 라는 뜻입니다.똑같은 행위를 그저 다른 방식으로 진행합니다. markup은 태그를 이용해서, markdown은 일반텍스트와 몇가지 특수 기호를 이용해서요.Markup과 Markdown은 나름데로 복잡합니다. 다만 markdown쪽이 아무래도 조금 더 쉽습니다. 그렇지만 나름데로의 문법이 존재하기 때문에, 처음 접하신다면 익숙하지 않으실 수 있습니다.하지만 누구나 자주 보셨을 법한 Markdown문법이 있습니다. 바로 인스타, 페이스북 등 각종 SNS에서 사용하는것인데요.SNS상에서 누군가를 태그하고 싶다면 “@”를 앞에 붙입니다. @wlqmffl0102 이런식으로 말이죠.이때, @가 바로 일반인들이 자주보는 markdown언어 중 하나입니다.여러가지 Markdown문법에 관해 알아보도록 하겠습니다.마크다운(Markdown) 기본문법 헤더(Header) : 제목 # 제목 1단계 ## 제목 2단계 ### 제목 3단계 #### 제목 4단계 ##### 제목 5단계 ###### 제목 6단계 제목 1단계제목 2단계제목 3단계제목 4단계제목 5단계제목 6단계현재 필자가 사용중인 jekyll-theme-chirpy에서는 3단계까지만 toc메뉴에 걸립니다.1~3단계를 사용하는 중, toc메뉴에 걸리지 않도록 하고 싶다면 아래와 같이 작성합니다.&amp;lt;h2 data-toc-skip&amp;gt;H2 - heading&amp;lt;/h2&amp;gt;&amp;lt;h3 data-toc-skip&amp;gt;H3 - heading&amp;lt;/h3&amp;gt;참고* jekyll-theme-chirpy에서는 1~3단계 제목 수준을 지키더라도 제목 글이 숫자로 시작되면 toc메뉴에서 제외됨. 수평선 : 게시글의 명시적 구분 --- 줄바꿈(개행) : 글 라인을 바꾸고 싶을 때. 단어 / 문장 사이에 띄워쓰기를 2번 하면 개행 됨. 단어 / 문장 사이에 띄워쓰기를 2번 하면 개행 됨. 참고* jekyll-theme-chirpy에서는 해당 방법으로 개행되지 않음 강조 : 문장 또는 단어 꾸밈 __볼드(굵게)__ 또는 **볼드(굵게)** _이탤릭체(기울임)_ ~~취소선~~ &amp;lt;u&amp;gt;밑줄(태그를 이용한 쓰임)&amp;lt;/u&amp;gt; **여러가지 강조를 _중복하여서_ 사용도 가능하다** 볼드(굵게) 또는 볼드(굵게) 이탤릭체(기울임) 취소선밑줄(태그를 이용한 쓰임) 여러가지 강조를 중복하여서 사용도 가능하다 리스트 Ordered list(순서가 있는 리스트) 1. Firstly2. Secondly3. Thirdly Firstly Secondly Thirdly Unordered list(순서가 없는 리스트) : 글머리 기호 *, +, - 지원 - Chapter- Section - Paragraph Chapter Section Paragraph Task list - [ ] TODO - [x] Completed - [ ] Defeat COVID-19 - [x] Vaccine production - [ ] Economic recovery - [ ] People smile again TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun : the star around which the earth orbitsMoon : the natural satellite of the earth, visible by reflected light from the sun Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sun 인용구 : 중복 사용 가능 &amp;gt; &quot;흑백 사진에 글쓰면 명언같다&quot;&amp;gt;&amp;gt; 주말의 띵화 (침착맨)&amp;gt;&amp;gt;&amp;gt; 침착맨 “흑백 사진에 글쓰면 명언같다” 주말의 띵화 침착맨 링크(Link) : 하이퍼 링크, 클릭시 해당 페이지로 이동 깃허브 홈페이지: &amp;lt;https://github.com&amp;gt;[Github](https://github.com)[Github](https://github.com &quot;마우스 오버시 링크에 대한 설명문 추가 가능&quot;)[현재 페이지 안에서의 이동(클릭시 &quot;## 두서&quot; 부분으로 이동)](#두서) 깃허브 홈페이지: https://github.comGithubGithub현재 페이지 안에서의 이동(클릭시 “## 두서” 부분으로 이동)현재 페이지 안에서의 이동부분은 조금 특이해서 추가 한다. header를 링크로 잡고 특수문자를 지운다. 가장 앞 부분에 #을 하나만 넣는다 스페이스 바 부분은 모두 “-“으로 바꾼다 영어 대문자는 모두 소문자로 바꾼다예) “## 마크다운(Markdown) 기본문법” -&amp;gt; “#마크다운markdown-기본문법” 이미지 : local에 이미지를 넣는 경우에는 상대경로를 적어줘야 합니다. 보통 이미지는 assets/img폴더 안에 들어갑니다. ![대체텍스트](https://cdn.jsdelivr.net/gh/cotes2020/chirpy-images/posts/20190808/mockup.png)![대체텍스트](https://cdn.jsdelivr.net/gh/cotes2020/chirpy-images/posts/20190808/mockup.png &quot;마우스 오버시 이미지에 대한 설명문 추가 가능&quot;)사이즈를 조절하고 싶은 경우 html 태그를 이용하여 처리 &amp;lt;img src=&quot;https://cdn.jsdelivr.net/gh/cotes2020/chirpy-images/posts/20190808/mockup.png&quot; width=&quot;300&quot; height=&quot;200&quot;&amp;gt; 사이즈를 조절하고 싶은 경우 html 태그를 이용하여 처리 — 코드 블럭 `Code`입니다. * 이때 사용되는 기호는 &#39;(작은따옴표)가 아니라 `(백틱)이다. 특수문자는 자판 숫자 1 바로 앞에 있다. 쉬프트를 누르면 물결(~)표시가 되는 녀석이다. 이 백틱(`)을 3개씩 위아래로 쓴 다음 그 사이에 코드를 넣어주면 코드 블럭이 된다.```html&amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;처럼 위쪽 백틱 끝에 해당 코드블럭이 어떤언어인지 명시해두면 코드 하이라이팅이 가능하다.Code입니다.&amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;마무리이번에는 markdown 문법 기초에 관해서 알아보았습니다. 다음 포스팅은 드디어 첫 포스팅을 작성하는 방법과 markdown문서 편집기(에디터)에 관해 다루겠습니다!" }, { "title": "초보자를 위한 GitHub Blog 만들기 - 4", "url": "/posts/Making-Git-blogs-for-beginners-4/", "categories": "GitHub Blog", "tags": "GitHub Blog, How to, Study", "date": "2021-10-01 20:28:00 +0900", "snippet": "초보자를 위한 GitHub Blog 만들기 시리즈초보자를 위한 GitHub Blog 만들기 - 1초보자를 위한 GitHub Blog 만들기 - 2초보자를 위한 GitHub Blog 만들기 - 3초보자를 위한 GitHub Blog 만들기 - 4Step 4. Google Search Console / Google Analytics / Google Adsense블로그 기본 설정이 완료 되었다면, 이제는 이 블로그가 다른 사람에게도 잘 보이는지, 잘 운영되고 있는지, 가능하다면 짤짤이를 벌 수 있는지 확인해보도록 하겠습니다.아 복잡해! 라고 생각 할 수 있지만, 천천히 따라하시면 금방 할 수 있다고 생각합니다.자 우선, Google Search Console 이란많은 사람들이 무언가 검색을 한다면 무엇을 이용할까요? 네이버, 다음과 같은 국내 포털사이트도 있지만 Google을 통해서 검색하는 경우도 많을 것 입니다.Google Search Console은 제 블로그가, 제 블로그의 포스팅이 Google로 검색하면 나오도록 해 주는 녀석입니다. Google Analytics 란말 그대로 Analytics(분석)입니다. 누가, 언제, 어디서, 얼마나 제 블로그에 접속하였는지, 여러가지 요소를 분석해주는 녀석입니다. Google Adsense 란여러 블로그 및 사이트에서 광고가 나오는것을 기억하실텐데요, 이녀석 입니다. 제 블로그 / 사이트에 광고를 띄우는것이죠.귀찮은 광고를 내 블로그에 띄운다는데, 왜? 라고 생각 할 수 있지만, Google Adsense를 이용해 블로그에 광고를 띄우고, 다른사람이 광고를 통해 어떠한 url로 접속하여 수익이 창출되어, 광고비를 제가 얻을 수 있답니다.와 모두 너무 좋은 기능들이예요. 혼자만의 힘으로 하기 어려운 것을 각각의 사이트에 계정생성, url연동 등으로 쉽게 사용가능하답니다.하나씩 시작하겠습니다.Step 4-1. Google Search Console우선 Google Search Console로 이동하여, 시작하기 버튼을 클릭합니다.좌측은 구매한 도메인이 있는 경우, 우측은 일반적인 GitBlog일경우입니다.저는 도메인 구매 및 추가 설정을 하지 않은 일반적인 Git blog형식으로, 우측을 이용하도록 하겠습니다.URL에 블로그 전체주소(https://wlqmffl0102.github.io/)를 적어줍니다.해당 url이 본인의 소유인지 확인합니다.아래에 보이는 googlexxxxxxx~.html파일을 다운로드 한 뒤, https://wlqmffl0102.github.io/ 페이지에 업로드 하라고 나옵니다.https://wlqmffl0102.github.io/ 페이지는 index페이지 인데, VSCode에서 Gemfile이 있는 위치에 index.html이 하나 있습니다.그곳에 다운로드 한 html파일을 넣습니다.Github Desktop을 이용해 commit과 push를 진행합니다.정상적으로 push가 완료 되었다면, 아래의 확인버튼을 눌러 계속해서 진행합니다.소유권이 확인되었다면, 제가 쓴(혹은 쓰게 될) 포스팅 페이지 등 블로그 내에 여러가지 페이지 등을 google에서 읽을 수 있도록(크롤링 할 수 있도록) 추가적인 작업을 진행해야합니다.Gemfile에 아래 문구를 한 줄 하단에 추가해줍니다.gem &#39;jekyll-sitemap&#39;Ruby Prompt에서 명령어를 입력 bundle install입력 후 기다렸다가 확인해보시면 jekyll-sitemap을 install한것이 확인가능합니다. jekyll serve명령어 입력 후, 잠시 뒤 http://localhost:4000/sitemap.xml 으로 접속 해 봅니다. xml로 이루어진 페이지가 보인다면 해당 페이지 전체를 복사하여 Gemfile이 있는 위치에 sitemap.xml파일을 생성 후 붙여넣어줍니다.sitemap.xml파일이 이미 생성되어 있다면 그대로 두셔도 무관합니다.해당 방법 말고, sitemap.xml을 생성해주는 사이트도 많이 있습니다.https://www.xml-sitemaps.com/과 같은 사이트 입니다. 화면 가운데 Your Website URL을 적어 넣으신 뒤, start버튼을 눌러주시면 자동 생성 됩니다.생성받은 sitemap.xml파일을 정확한 위치에 넣어주시면 됩니다.마지막으로 sitemap.xml이 있는 동일한 위치에 robots.txt 파일을 생성하고, 내용을 다음과 같이 적습니다.User-agent: *Allow: /Sitemap: https://wlqmffl0102.github.io/sitemap.xmlSitemap의 주소는 본인 블로그 주소를 넣으셔야 합니다.Github Desktop을 이용해 commit과 push를 진행합니다.push가 정상적으로 이루어 졌다면, Google Search Console의 Sitemap항목으로 들어가 sitemap.xml을 올려줍니다.등록이 완료 된 후 7일 이내로 검색 엔진에 노출됩니다.Step 4-2. Google AnalyticsGoogle Analytics로 이동합니다.첫 화면에서 파란색 “측정 시작”이라는 버튼을 누르면 진행이 됩니다. 계정 설정 단계에서는 계정 이름만 적어줍니다. 말 그대로 계정 이름으로, 편하신것 아무거나 입력하시면 됩니다. 저는 제 본인 이름을 넣었다가, 그냥 wlqmffl0102_github라고 입력하였습니다.체크를 하시거나 체크를 해제하는것 없이 디폴트 값 그대로 두고 다음 버튼 클릭. 속성 설정 에서 몇가지 중요한 설정들이 나옵니다.속성 이름은 본인 블로그 주소를 넣어줍니다. http 혹은 https까지 모두 포함된 주소를 입력하시면 됩니다.보고 시간대 및 통화는 “대한민국”으로 맞춰주시면 됩니다.여기서 중요!!! 조금 아래로 내리면 고급 옵션 열기라고 하는 버튼이 보이십니다.이 설정을 꼭 해주셔야만 블로그-애널리틱스 연결이 가능합니다!고급 옵션을 열면 유니버설 애널리틱스 속성 만들기라고 보이실텐데, 우측 버튼을 눌러 활성화 시켜주시고, URL을 입력합니다.아래 버튼들은 디폴트 값 그대로 두시고 다음 버튼을 클릭합니다. 비즈니스 정보는 대충 입력해주시고, 다음 버튼을 클릭합니다. 이후에 약관이 나올텐데, 약관 언어를 대한민국으로 설정 후 동의 진행해주시면 됩니다.정상적으로 설정 되셨다면 애널리틱스 홈 화면이 보이실겁니다.그 중 좌측 하단 “관리”탭으로 들어갑니다.속성 설정에서 유니버설 애널리틱스 속성을 만드셨다면 다음과 같이 유니버설 애널리틱스 속성화면을 보실 수 있습니다.그 중, 추적 코드버튼을 누릅니다.그러시면 하단에 추적 ID 및 범용 사이트 태그를 보실 수 있습니다.jekyll-theme-chirpy는 _config.yml에서 Google Analytics관련 설정을 할 수 있기 때문에, 추적 ID를 복사 후, _config.yml파일을 열어, 해당 부분에 값을 입력해줍니다.google_analytics: id: &#39;UA-*********-1&#39; # 이쪽에 넣어주시면 됩니다.이때, 추적 ID는 꼭 UA로 시작합니다. 유니버설 애널리틱스의 추적아이디가 필요로 하기때문에, 헷갈리지 않으시길 바랍니다.테마 중, _config.yml에서 Google Analytics관련 설정을 지원하지 않는 경우, “범용 사이트 태그(gtag.js)”를 이용하여야 합니다._includes폴더 안에 head.html 또는 footer.html에 해당 스크립트를 복사 붙여넣기 해주시면 됩니다.듣자하니 footer에 넣으면 가장 마지막에 analytics가 로드되면서 사이트 로드가 느려지는것을 방지 할 수 있다고 합니다.Step 4-2. Google AdsenseGoogle Adsense는 가입 절차는 쉬운편이라 캡쳐없이 글로 적겠습니다.Google Adsense로 접속하여 시작하기 버튼을 클릭합니다.Google Adsense 가입이 진행되는데, 웹사이트 URL과 이메일 주소 등 정보를 입력합니다.국가 또는 지역을 대한민국으로 맞춘 뒤, 약관에 동의합니다.수익금을 받기 위해 결제 프로필을 등록합니다. 주소 및 연락처 등 개인정보를 입력합니다.가입이 거의 이루어질 쯤, 구글 애드센스 코드를 웹 사이트에 적용하라고 뜰텐데, 이 부분이 중요합니다.해당 애드 센스 코드를 복사하여, _includes폴더안 head.html에 붙여넣어 줍니다.저는 head.html &amp;lt;head&amp;gt;태그 안쪽 가장 하단에 넣어줬습니다.&amp;lt;!--...중략...--&amp;gt; &amp;lt;!-- JavaScript --&amp;gt; &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!-- Google Addsence --&amp;gt; &amp;lt;script data-ad-client=&quot;ca-pub-8857040748920572&quot; async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; 이때, data-ad-client값인 ca-pub-8857040748920572가 본인의 애드센스 id가 됩니다.우선 넣으셨다면 Github Desktop을 이용해 commit과 push를 진행합니다.push가 정상적으로 이루어졌다면, 다시 Adsense페이지로 돌아가 “코드를 사이트에 붙여넣었습니다” 부분에 체크 후 완료 버튼을 눌러 줍니다.코드 확인 완료 창이 뜬 뒤, 1일 이내로 사이트 검토에 들어가며, 승인이 될 때까지 기다립니다. 보통 1~14일 정도 소요됩니다.코드 확인이 제대로 되지 않은 경우, 잘못된 장소에 코드가 들어갔거나, push가 제대로 이루어지지 않는 등의 경우가 있습니다.승인이 된 경우 메일이 온다고 합니다.사실 저도 아직 승인을 기다리고 있는중이라, 해당건에 관해서는 승인 후 추가하도록 하겠습니다!양질의 게시글이 어느정도 있어야 승인이 된다고 합니다.아직 저는 신생 블로거라, 한참 남았을거라 생각합니다. 꼭 추후에 승인 이후 과정도 넣고 싶습니다.자, 이렇게 어느정도 블로그의 모양새가 나왔을거라 생각합니다.추가적으로 질문을 받게되면 게시글을 계속 추가해나가고 싶습니다.[ 2021.10.27 추가내용 ]10월 초에 해당 게시글을 작성하고, 구글 애드센스도 함께 신청하였는데요!추가하는 내용은 다름아님 승인이 되어 애드센스가 “계정이 활성화되었습니다.”라는 화면이 확인되었습니다!!저는 사실 4번정도 “애드센스 사이트가 다운되었거나 사용할 수 없음”으로 승인 거절을 당한 뒤, sitemap.xml과 robots.txt파일을 수정한 뒤,3주 쪼오금 더 지나서 오늘 승인이 났습니다~!관련사항은 내용을 덧붙이지 않고 새로운 포스팅으로 찾아뵙겠습니다링크를 타고 들어가시면 바로 확인가능하십니다!보너스. disqus 덧글 기능 이용하기disqus에 접속합니다.GET STARTED버튼을 눌러 Sign in(회원가입)을 진행합니다. 어렵지 않게 진행가능합니다.회원가입 후 로그인하게 되면 I want to comment on sites / I want to install Disqus on my site버튼 두개가 보이실 텐데요, jekyll-theme-chirpy는 _config.yml에서 Disqus관련 내용이 존재합니다. 따라서 I want to comment on sites버튼을 누르시면 됩니다.이후에 _config.yml파일에 disqus관련 내용을 적어주시면 됩니다.disqus: comments: true # boolean type, the global switch for posts comments. shortname: &#39;Dodev-HADA&#39; # Fill with your Disqus shortname. › https://help.disqus.com/en/articles/1717111-what-s-a-shortname테마 중, _config.yml에서 disqus관련 설정을 지원하지 않는 경우, 소스 코드를 수정해야 할 수도 있습니다. 다만 제가 알기론 거의 대부분의 테마들은 disqus관련 기능설정 부분이 있는 것으로 압니다.마무리좀 더 포스팅이 길어질거라 예상했는데, 의외로 4개로 끝나버렸네요.뭔가 잊어버린게 있으려나.. 잘 모르겠습니다.보시기에 불편하시거나, 잘 안되거나, 문제가 발생하는 등의 내용은 연락바랍니다. 초보자를 위한 GitHub Blog 만들기 시리즈초보자를 위한 GitHub Blog 만들기 - 1초보자를 위한 GitHub Blog 만들기 - 2초보자를 위한 GitHub Blog 만들기 - 3초보자를 위한 GitHub Blog 만들기 - 4" }, { "title": "초보자를 위한 GitHub Blog 만들기 - 3", "url": "/posts/Making-Git-blogs-for-beginners-3/", "categories": "GitHub Blog", "tags": "GitHub Blog, How to, Study", "date": "2021-09-30 20:28:00 +0900", "snippet": "초보자를 위한 GitHub Blog 만들기 시리즈초보자를 위한 GitHub Blog 만들기 - 1초보자를 위한 GitHub Blog 만들기 - 2초보자를 위한 GitHub Blog 만들기 - 3초보자를 위한 GitHub Blog 만들기 - 4Step 3. 블로그 기본 설정하기본인의 블로그 주소로, 원하는 테마 업로드를 완료하였다면, 기본 설정 몇가지가 더 필요합니다.이번 포스팅에서는 기본 설정에 관해 이야기하도록 하겠습니다.Step 3-1. _config.yml파일 확인하기본인 로컬 폴더, VSCode 탐색기를 보시면, _config.yml파일이 존재합니다. 해당 파일은 테마마다 다르기 때문에, 설정에 관해서라면 다운로드하였던 테마 제작자의 README.md 등을 참고하여 확인하시면 훨씬 편하게 설정 할 수 있습니다.저는 jekyll-theme-chirpy테마를 다운로드 받았기에, 다른 테마를 사용하신다면 _config.yml파일의 내용이 상이할 수 있습니다.theme: jekyll-theme-chirpy # import하는 테마 명입니다. 디폴트로 사용중인 테마 명이 들어가 있으므로, 수정은 하지 않습니다.baseurl: &#39;&#39; # 사용자 페이지를 만들었을 경우, 빈칸으로 둡니다. 프로젝트 페이지를 만든 경우 프로젝트 명을 적어줍니다. # 사용자 페이지와 프로젝트 페이지를 모르신다면, [초보자를 위한 GitHub Blog 만들기 - 1](https://wlqmffl0102.github.io/posts/Making-Git-blogs-for-beginners-1/)에서 Step 1-2. repository생성을 참고하시길 바랍니다.=lang: ko-KR # 사용하는 언어 설정을 진행합니다. http://www.lingoes.net/en/translator/langcode.htm 로 접속하여 확인가능합니다.timezone: Asia/Seoul #timezone설정입니다. http://www.timezoneconverter.com/cgi-bin/findzone/findzone 에서 확인가능합니다.# jekyll-seo-tag settings › https://github.com/jekyll/jekyll-seo-tag/blob/master/docs/usage.md# ↓ --------------------------title: Dodev # 블로그 이름입니다. 설정하면 브라우저 상단에 설정된 이름이 확인가능합니다.tagline: Dodev 하다 # 서브 타이틀 입니다. 설정하면 블로그 첫 페이지 좌측에서 확인 가능합니다.description: &amp;gt;- # &quot;used by seo meta and the atom feed&quot;라고 나옵니다. 저는 설정을 그대로 두었습니다. A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.url: &#39;https://wlqmffl0102.github.io&#39; # &#39;https://username.github.io&#39;와 같이 설정합니다. 설정이 잘 못 되면 곤란합니다. # 잘 적어넣도록 합니다.github: username: wlqmffl0102 # 본인의 github username을 적습니다.#twitter:# username: twitter_username # 본인의 twitter username을 적습니다. 저는 트위터는 사용하지 않아 주석 처리 해 두었습니다.social: # Change to your full name. # It will be displayed as the default author of the posts and the copyright owner in the Footer name: Dodev-하다 email: wlqmffl0102@naver.com # change to your email address links: # The first element serves as the copyright owner&#39;s link #- https://twitter.com/username # change to your twitter homepage - https://github.com/wlqmffl0102 # change to your github homepage # Uncomment below to add more social links # - https://www.facebook.com/username # - https://www.linkedin.com/in/username # 상단은 social관련 내용입니다. 본인의 이름, 이메일, 링크 등을 작성합니다. 저는 깃허브만 올려두었습니다.google_site_verification: 000 # Google Search Console관련 내용입니다. 이후 포스팅에서 다루겠습니다.# ↑ --------------------------google_analytics: id: &#39;000&#39; # Google Analytics ID입니다. 이 또한 이후 포스팅에서 다루겠습니다. pv: proxy_endpoint: cache_path: theme_mode: # chirpy테마는 [light|dark]테마를 지원합니다. 비워두시면 사용자의 디폴트 값이 설정되고, light 또는 dark로 입력해두시면 페이지의 기본 테마가 설정됩니다.img_cdn: &#39;&#39; #cdn 이미지 설정입니다. 저는 따로 진행하지 않았으나 진행하시려면 url을 작성해주시면 됩니다.avatar: /assets/img/profile.png # 대표이미지 라고 생각하시면 됩니다. /assets/img경로에 사진을 넣은 뒤 작성하시면 됩니다.toc: true # toc(Table of contents)입니다. 블로그 보시다 보면 포스팅 옆에서 스크롤을 따라오는 목차같은 녀석이 있습니다. # 사용하시려면 true, 아니라면 false를 적으시면 됩니다.disqus: comments: true # disqus라는 덧글기능을 하는 녀석입니다. 사용하시려면 true, 아니라면 false를 적으시면 됩니다. shortname: &#39;Dodev-HADA&#39; # 사용하신다면 https://disqus.com/ 에 가입 후, shortname을 넣어줍니다.paginate: 10 # ------------ 아래로는 크게 손 볼 것 없어서 생략합니다. ------------------위에도 이야기 했듯, 해당 파일은 테마마다 다르기 때문에, 설정에 관해서라면 다운로드하였던 테마 제작자의 repository에서 참고하시길 바랍니다.저는 jekyll-theme-chirpy테마를 다운로드 받았기에, https://github.com/cotes2020/jekyll-theme-chirpy 으로 접속하시면 다양한 내용을 찾아 볼 수 있습니다.Step 3-2. 파일 삭제 및 추가작업jekyll-theme-chirpy의 제작자의 안내에 따라 추가 작업을 진행하겠습니다. .travis.yml파일 삭제 _posts 폴더 안의 파일 삭제 -&amp;gt; 이것은 참고할만한 포스팅이 몇가지 있기 때문에, 보시고 불필요한것만 먼저 삭제하시고, 나머지는 참고하셨다가 추후에 삭제하시는 편이 좋다고 생각합니다. docs폴더 삭제 .github폴더 안에서, workflows폴더를 제외한 나머지 폴더, 파일 삭제(ISSUE_TEMPLATE폴더, CODE_OF_CONDUCT.md파일, CONTRIBUTING.md파일, FUNDING.yml파일, PULL_REQUEST_TEMPLATE.md파일, stale.yml파일 총 6개) .github폴더 &amp;gt; workflows폴더에서 ci.yml파일, issue-pr-interceptor.yml파일 2개 삭제 중요!!! .github&amp;gt;workflows&amp;gt;pages-deploy.yml.hook파일이 있을텐데, 해당 파일에서 마지막 .hook부분을 지워서. .github&amp;gt;workflows&amp;gt;pages-deploy.yml파일로 만들어 줍니다. 이후에, 해당 파일을 열어보면 가장 상단 branches를 수정합니다. name: &#39;Automatic build&#39; on: push: branches: - main # 이 부분을 꼭 master에서 main으로 수정해줍니다. paths-ignore: - .gitignore - README.md - LICENSE Step 3-3. 배포관련 추가내용jekyll-theme-chirpy는 github에 push(배포)시에 main브런치 이외에 gh-pages브런치를 생성합니다.여기서 머리아픈 이야기들이 나오는데, 본인 github repository로 이동하여 확인가능합니다.내용을 주욱 이야기 하자면, 머리 아프기 때문에 간단하게 말하자면.main브런치로 사용하는것을 pages-deploy.yml파일에서 명명해주었으나, 자동으로 chirpy테마는 ci / cd구성이 구축되어 있어 main으로 배포하더라도 자동으로 gh-pages브런치가 생성된다. 정도만 아시면 될 것 같습니다.gh-pages브런치를 이용하여 페이지 설정 하는 부분도 있으나, main브런치를 이용해 페이지를 사용하고 있지만 문제가 되는 점은 하나도 없기에 알고만 계시면 될 것 같습니다.Step 3-4. 로컬서버에서 페이지 확인해보기여러가지 수정사항이 정상적으로 반영되는지 우선 로컬 서버에서 확인해보겠습니다.변경사항들을 모두 저장 후, Start Command Prompt with Ruby를 실행합니다. 본인의 git Clone경로(폴더)로 이동합니다.(아래는 제 경로입니다) cd C:\\Users\\wlqmf\\Documents\\GitHub\\wlqmffl0102.github.iojekyll 서버 동작 bundle exec jekyll servehttp://127.0.0.1:4000/ 또는 http://localhost:4000/으로 접속하여 변경사항을 정상적으로 확인했다면, github desktop을 이용해 commit, push진행을 해줍니다.5~10분 뒤, 본인의 Github Page 주소 즉, 저에게는 https://wlqmffl0102.github.io/ 으로 접속하여 정상적으로 페이지가 보인다면 끝입니다!마무리깃 블로그 만들기 포스팅은 계속됩니다!다음포스팅초보자를 위한 GitHub Blog 만들기 - 1초보자를 위한 GitHub Blog 만들기 - 2초보자를 위한 GitHub Blog 만들기 - 3초보자를 위한 GitHub Blog 만들기 - 4" }, { "title": "Git 용어 정리", "url": "/posts/Git-organizing-the-terms/", "categories": "Git", "tags": "Git, Study", "date": "2021-09-28 15:40:00 +0900", "snippet": "Git여담으로 끼워넣겠습니다. 전혀 모르고 하다보면 어느순간 이해하게 됩니다만, 그렇지만 간단한것은 한번씩 짚고 넘어가려고 합니다.깃 블로그 만들기에는 꼭 필요한 내용은 아닙니다. 넘어가셔도 무관합니다.Github 사용법은 몸에 익숙해지면 여러가지 편리함으로 업무에 효율을 높여줍니다.그렇지만 사용법을 잘 알지 못하면 사용법을 익히기 전까지는 조금 귀찮을 수 있습니다.어떤 가게에서 물건을 살 때, 그냥 현금을 주고 사면 복잡할 것이 없습니다. 체크카드를 사용하면 더 편하게, 더 여러가지 일들을 할 수 있습니다. 그렇지만 체크카드를 사용하기 위해서는 은행에서 계좌를 개설하고, 계좌에 돈을 넣은 다음에 정해진 만큼의 돈 만 사용 할 수 있죠. 어플을 사용하지 않는다면, 체크카드 혹은 계좌에 돈이 얼마나 남아있는지 확인하기 위해서는 은행이나, ATM기까지 가야 합니다.모든 일들은 저렇다고 생각합니다. 사용에 익숙해지면 편리한점들만 보이는데, 첫 사용이라면 궁금증도, 불편함도 있다고 생각합니다. 그래서 어렵게 이야기 하기보단 조금씩 접근성을 늘려갔으면 합니다!여담은 그만하고, 이번에는 여태까지 나온 Repository, Clone, Commit, Push, Pull에 관해 이야기 하려고 합니다.GithubGithub는 Git을 호스팅해주는 웹 페이지를 말합니다. 그렇다면 Git은 무엇이냐, 보통 “형상관리 툴”이라고 이야기 합니다.즉, Github와 Git은 엄연히 다른것 입니다. Git은 tool이고, Github는 Service입니다.간단하게 이야기 하자면, 프로그램은 엄청나게 많은 코드를 포함합니다. 그 코드는 혼자서 작성하는것이 아니지요. 여러 사람과 협업을 하며 코드를 수정하고, 추가하고, 삭제하며 프로그램은 만들어집니다.그런데 만약, 그 기록을 남겨놓지 않는다면? 추후에 문제가 발생하여도 빠른 대응이 어려울 것입니다.그래서 누가, 언제, 무슨코드를 어떻게 했느냐 하는 기록을 남기는(흔히 형상관리라고 하지요.) 도구를 “Git”이라고 부르고,그것을 웹페이지에서 볼 수 있도록 도와주는 녀석이 “Github”입니다.참고로, Github이외에도 여러가지 서비스가 존재합니다. ex) GitHub, GitLab, BitBucketRepository말 그대로 ‘저장소’입니다. 파일이나 폴더를 저장해 두는 곳입니다. Local Repository : Local. 즉 현재 사용하는 PC, 노트북 등의 장치에 존재하는 저장소입니다. PC에서 어떤 프로그램을 다운로드 받게 되면 하드디스크의 용량을 차지하게 됩니다. 물론 폴더도 그렇습니다. 폴더 안에 사진들만 저장해 둔다면 “사진첩”, 동영상만 저장해둔다면 “동영상”이라고 폴더 이름을 적어 나눠 둘 것 같습니다. 사진이나, 동영상이 아니라 어떠한 프로젝트를 위한 폴더를 만들고, 그곳에 관련 파일들을 저장해둔다면, 그 폴더 이름은 “xx project” 등과 같을 수 있습니다. 이때, xx project라고 불리는 폴더가 Local Repository입니다. Remote Repository : Local에 위치하지 않는 저장소입니다. 간단히 말하자면 현재 PC 등에서 파일을 저장하는 폴더 등은 Local 저장소이고, 본인이 PC에 직접 가지고 있지 않고, 다른 곳에 저장되어있는 각종 파일과 폴더 등은 원격지(Remote) 저장소(Repository)에 저장되어 있다라고 생각하시면 될 것 같습니다. 저희는 Github(웹 사이트)에 Repository를 만들었지요. 그것이 바로 Remote 저장소(줄여서 원격지)라고 생각하시면 될 것 같습니다. Clone / Fork우선 Clone부터 확인하겠습니다. Clone또한, 말 그대로 복제입니다.원격지에 저장되어 있는 모든 데이터를 로컬로 복사해오는 기능입니다. 원격지(Github)로부터 데이터를 Local로 Clone해 오는 방법은 여러가지 입니다. 명령 프롬프트(cmd)를 이용하는 방법 git bash를 이용하는 방법 Github Desktop을 이용하는 방법 원격지 데이터를 .zip파일로 다운로드 받아 Local에 압축을 해제하는 방법등 여러가지 방법이 있습니다.Clone이 진행된다면, local Repository와 Remote Repository가 연결됩니다.그 중, 제 포스팅은 Github Desktop을 이용하고 있는데요. 초보자들이 사용하기 가장 좋은 방법이라고 생각합니다. UI지원으로 명령어를 직접 사용하지 않고, 버튼만 몇가지 눌러 git을 사용할 수 있습니다.Github Bash는 OS에 상관없이 리눅스체제의 명령어를 입력하여 사용 할 수 있습니다. Windows와 Linux 그리고 mac은 사용하는 명령어가 모두 다릅니다. windows는 cmd(명령 프롬프트), Linux와 mac은 terminal을 사용합니다. windows에서 Linux명령어를 사용 할 수 있어서, git과 linux명령어를 함께 배우고싶거나, 모두 사용할 줄 아신다면 git bash는 매우 유용합니다.다음으로 Fork입니다.fork는 본인의 Repository가 아닌, 다른사람의 Repository를 본인의 Repository로 복제하는것입니다.제 블로그에서는 아직까지 fork에 관해 다루지 않았습니다.fork하게 되면 fork한 다른 사람의 Repository와 연결됩니다. 연결되어 있기 때문에, 원격지 Repository에서 수정, 삭제, 추가 등의 행위가 발생한다면 fetch, pull의 과정이 필요합니다.또한 본인이 상대방의 Repository에 관해 어떠한 부분을 수정거나, 추가하는 등 추가적인 작업을 진행 후 pull request를 진행합니다.request가 상대방으로부터 승인된다면 본인이 수정한 내용이 상대방의 Repository에 기록됩니다.(commit, merge 진행) 다른 사람의 Repository에 접속 후 우측 상단의 fork버튼을 누르면 동일한 이름의 Repository가 본인의 github에 생성됩니다.위 예는 제가 사용했던 깃헙 블로그 테마인 jekyll-theme-chirpy의 Repository입니다.Fork는 추후에 필요시 포스팅을 작성하도록 하겠습니다.CommitCommit이란, 이전 포스팅(초보자를 위한 GitHub Blog 만들기 - 1)에서“그래서 누가, 언제, 무슨코드를 어떻게 했느냐 하는 기록을 남기는(흔히 형상관리라고 합니다.) 도구를 “Git”이라고 부르고,그것을 웹페이지에서 볼 수 있도록 도와주는 서비스 중 하나가 “Github”입니다.” 라고 했는데,이때, 기록을 남기는 수단입니다.파일의 추가 / 수정 / 삭제시에 남기는 메모로, 변경 이력을 남깁니다.Commmit의 이름(내용)을 통해 각각의 commit을 구분합니다.Github Desktop을 사용할시, 좌측 하단에 사용자 이미지 바로 옆 부분에 Commit 이름(내용)을 작성 후 하단의 “Commit to main”버튼을 눌러 commit을 진행합니다.이때, main은 브런치 명입니다. branch(브런치) 관련 내용은 추후 작성하도록 하겠습니다.PushPush란 로컬 Repository의 데이터를 원격지 Repository로 업로드 하는것을 뜻합니다.commit후 push가 진행되며, 여러가지 변경들이 commit 이름에 따라 구분뒤어 업로드 됩니다.push가 완료 되면 로컬과 원격지의 데이터 내용이 동일해집니다.PullPull이란, 반대로 원격지 Repository를 로컬 Repository로 내려 받는것을 뜻합니다.혼자서 사용하는 Repository보다는, 여러사람이 함께쓰는 Repository의 내용을 로컬로 받아오는 경우가 많습니다.여러명이 쓰는 Repository에서 누군가 commit, push를 진행하게되면,push를 진행한 사람은 로컬과 원격지의 데이터가 동일해지지만, 나머지 사람들은 로컬과 원격지 Repository간의 차이가 발생하기 때문에, pull을 진행해야만 합니다.pull을 진행하면 원격지와 로컬의 데이터 내용이 동일해집니다.git에 관해서도 찬찬히 작성하도록 하겠습니다.git을 좀 더 쉽게 접근할 수 있는 사이트가 몇몇 있습니다.저는 그 중 게임 형식으로 git의 사용법을 알 수 있는 Learn Git Branching을 추천드립니다!git 관련 글도 계속해서 적어나가겠습니다!" }, { "title": "초보자를 위한 GitHub Blog 만들기 - 2", "url": "/posts/Making-Git-blogs-for-beginners-2/", "categories": "GitHub Blog", "tags": "GitHub Blog, How to, Study", "date": "2021-09-27 20:28:00 +0900", "snippet": "초보자를 위한 GitHub Blog 만들기 시리즈초보자를 위한 GitHub Blog 만들기 - 1초보자를 위한 GitHub Blog 만들기 - 2초보자를 위한 GitHub Blog 만들기 - 3초보자를 위한 GitHub Blog 만들기 - 4Step 2. Jekyll과 Ruby 설치Step 2-1. Jekyll Theme선택나만의 깃헙 페이지 주소가 생성되었다면, 드디어 그 페이지를 블로그처럼 꾸미는 일을 시작해보겠습니다.Github 블로그는 Github Page, Jekyll(지킬), Ruby(루비)가 필수입니다! 셋 중 하나는 완료했고, 나머지는 쉽게 설치가 가능합니다.Jekyll과 ruby를 다운로드 하기 전, 마음에 드는 테마를 고르려고 합니다. http://jekyllthemes.org/ https://jekyllthemes.io/free http://themes.jekyllrc.org/ https://github.com/topics/jekyll-theme과 같이 다양한 Jekyll Themes를 지원하는 페이지가 있습니다.구글 등에 검색하시면 훨씬 많이 나오니, 찬찬히 선택 하시길 바랍니다.저는 처음에는 Type-on-Strap 테마를 선택하여 다양한 커스텀을 거쳐 사용하다, 불편한 점이 많다고 생각해서 블로그를 다시 만들었습니다.선택에 여러가지 경우가 많겠지만, 결론적으로 저는 jekyll-theme-chirpy 테마를 선택했습니다!현재 여러분이 보고 계신 제 블로그는 jekyll-theme-chirpy를 사용한 블로그입니다.제가 필요한 여러가지 기능들이 구현이 되어있고 몇가지만 커스터마이징 후 사용가능하다고 생각되어서 선택하였는데, 다른 테마들과는 조금 다른점이 있더라구요.그렇지만 어떠한 테마를 사용하여도 큰 틀은 동일합니다! 하지만 디테일은 모두 다르다는 점! Step 2-2. Ruby 설치Ruby. 예쁜 이름입니다! 루비는 프로그래밍 언어명입니다. Jekyll이 Ruby로 만들어져 있어서 Jekyll설치 전, 먼저 설치하도록 하겠습니다.Ruby 공식사이트로 접속 후, 아래와 같이 Ruby+Devkit 2.6.8-1 (x64)를 선택하여 다운로드 합니다.이후 다운받은 설치파일을 실행 후, 별 다른 수정 없이 Next만 눌러 디폴트로 설치합니다. 설치 완료 후, 좌측 하단 윈도우 검색창에 “ruby”라고 검색하여 Start Command Prompt with Ruby를 실행합니다. 검은색의 명령어창(Prompt)가 열릴것입니다. 여기서 명령어를 사용하려고 합니다. 사용하시는 컴퓨터의 파일명, 경로 등이 모두 영어로 되어있다면 괜찮지만, 대게 한글도 섞여 있을 것입니다. 그렇기 때문에 경로 이동 후 인코딩을 먼저 진행하겠습니다.우선, Clone 진행 시 지정했던 위치로 이동합니다.Clone 위치는 모두 다릅니다. 위치를 알 수 없다면 열려있는 VSCode 좌측 README.md파일을 우클릭 후 “파일 탐색기에 표시”버튼을 누르면 폴더창이 열립니다.해당 폴더가 바로 Clone했던 local위치입니다.아래는 저의 경로로 예를 든것이며, 본인의 git Clone경로(폴더)로 이동합니다. cd C:\\Users\\wlqmf\\Documents\\GitHub\\wlqmffl0102.github.io이동한 뒤, 인코딩을 합니다. chcp 65001명령어 입력 후 “Active code page: 650001”이라는 글자가 확인된다면 정상입니다.Step 2-3. Jekyll 설치jekyll 및 bundle설치 : 두 개의 명령어를 순서대로 입력합니다. gem install jekyll bundler gem install webrickjekyll생성 jekyll new ./bundle install bundle installjekyll 서버 동작 bundle exec jekyll serve에러가 없이 정상적으로 모두 실행되었다면 웹 브라우저 주소창에 http://127.0.0.1:4000/ 또는 http://localhost:4000/로 접속. “https://wlqmffl0102.github.io/”와 동일한 화면. 즉 화면에 “Hello! This is the first page!”가 나온다면 정상입니다!Step 3. Jekyll Theme(지킬 테마) 적용하기Step 3-1. 테마 다운로드하기드디어 아까 전에 블로그에 테마를 적용하려고 합니다!지킬과 루비를 다운로드 받기 전, 마음에 드는 테마를 고르셨을텐데요, 아마 데모페이지를 보셨을것입니다.데모 페이지를 그대로 다운로드 해서 제 블로그에 올려서 확인해보려고 해요.어떤 데모이든, “Download” 혹은 “GitHub” 링크가 존재할것입니다. 데모페이지에서 바로 다운받으셔도 상관없습니다.GitHub 링크만 존재하는 경우, 해당 Github페이지로 이동합니다. 제 경우에는 https://github.com/cotes2020 으로 접속합니다. 접속하시면 Repository 이름에 본인이 선택한 테마이름의 Repository가 보이실것입니다. 해당 Repository로 들어가셔서 소스를 다운로드 합니다. 압축파일을 풀고, 폴더 안의 모든 내용을 복사하여, Clone한 local 폴더 안에 붙여넣어줍니다.파일이 존재한다는 메시지가 뜬다면 덮어쓰기를 진행합니다.여기서, Clone한 local폴더는 저의 경우 C:\\Users\\wlqmf\\Documents\\GitHub\\wlqmffl0102.github.io입니다. 모두 다릅니다. 본인의 경로로 들어가서 붙여넣기 하셔야 합니다!Step 3-2. 테마 적용 로컬 확인Ruby Prompt에서 명령어를 입력 bundle install지킬 로컬서버 실행bundle exec jekyll serve정상적으로 명령어 입력 후, http://127.0.0.1:4000/ 또는 http://localhost:4000/으로 접속하시면 Demo화면과 동일하게 보이실것입니다!와~~ 드디어! 하고 생각하실 수 있지만, 이것은 로컬 확인입니다.Github page로 생성한 제 홈페이지는 여전히 “Hello! This is the first page!”로만 보여집니다.Step 3-3. Github로 Push자, 여기에서 설명을 조금 하겠습니다.Github Page란 설정된 Github Repository에 있는 정적 파일을 이용해서 페이지를 보여주는것입니다.로컬(Local)이란, 지금 본인이 사용중인 컴퓨터… PC, 노트북 따위를 말합니다.조금 전, 저희는 인터넷에서 마음에 드는 테마 소스를 다운로드받아서 local에 있는 폴더 안으로 붙여넣기를 했습니다.즉, local에는 파일이 엄청나게 많아 졌지만, Github Repository에는 어떠한 파일을 작성, 수정, 삭제 하지 않았습니다.그래서 local에 있는 여러가지 파일을 Github Repository로 전송해야합니다.그렇다면 어떻게 하느냐, 여러가지 방법이 있지만 저희는 쉬운 Github Desktop을 설치했습니다!Github Desktop은 원격지에 있는 Github Repository와 local 폴더 안에 있는 파일들을 대조하고, 달라진것이 있다면 자동으로 push(local -&amp;gt; repository)하거나, pull( repository -&amp;gt; local)를 할 수 있도록 쉽게 도와줍니다.Github Desktop을 열어보시면, 좌측에 local에 붙여넣었던 파일명이 쭉 뜰것입니다.Github Desktop이 원격지 Repository와 local사이에서, 어떤파일이 추가,수정,삭제됬는지 확인을 해주는 것입니다!좌측 하단부에 이전과 같이 commit to main이라는 버튼이 있을텐데, 활성화 되어 있지 않을 것 입니다. 파일이 여러개라서 commit 내용을 직접 적어줘야 합니다.대충 아무내용을 적으신 다음, commit to main이라는 버튼을 클릭한 뒤, Push origin버튼을 눌러주시면 됩니다. 5~10분 뒤, 본인의 Github Page 주소 즉, 저에게는 https://wlqmffl0102.github.io/ 으로 접속하여 정상적으로 페이지가 보인다면 끝입니다!마무리깃 블로그 만들기 포스팅은 계속됩니다!다음 포스팅초보자를 위한 GitHub Blog 만들기 - 1초보자를 위한 GitHub Blog 만들기 - 2초보자를 위한 GitHub Blog 만들기 - 3초보자를 위한 GitHub Blog 만들기 - 4" }, { "title": "초보자를 위한 GitHub Blog 만들기 - 1", "url": "/posts/Making-Git-blogs-for-beginners-1/", "categories": "GitHub Blog", "tags": "GitHub Blog, How to, Study", "date": "2021-09-26 20:28:00 +0900", "snippet": "초보자를 위한 GitHub Blog 만들기 시리즈초보자를 위한 GitHub Blog 만들기 - 1초보자를 위한 GitHub Blog 만들기 - 2초보자를 위한 GitHub Blog 만들기 - 3초보자를 위한 GitHub Blog 만들기 - 4두서가장 처음으로 작성하고자 마음먹은 것이 깃 블로그에 관한 것이였습니다.개발을 전혀 모르시는 분이시라면 어렵고, 구조를 잘 몰라도 은근 헷갈립니다.인터넷이 참 잘 되어 있어서 몇 번 검색만으로도 방대한 자료를 찾아 볼 수 있습니다.그치만 제게 딱 맞는 글을 찾기란 어렵지요.그래서 적어도 그냥 따라하기만 하면 깃블로그를 만들 수 있는 포스팅을 적고 싶었습니다.그런 고로, 시작하겠습니다.해당 포스팅은 Window, 64bit 기준으로 작성되었습니다Step 0. Github Blog(깃허브 블로그)란?Github 라고 불리는 웹 페이지가 있습니다. Github는 Git을 호스팅해주는 웹 페이지를 말합니다. 그렇다면 Git은 무엇이냐, 보통 “형상관리 툴”이라고 이야기 합니다.간단하게 이야기 하자면, 프로그램은 엄청나게 많은 코드를 포함합니다. 그 코드는 혼자서 작성하는것이 아니지요. 여러 사람과 협업을 하며 코드를 수정하고, 추가하고, 삭제하며 프로그램은 만들어집니다.그런데 만약, 그 기록을 남겨놓지 않는다면? 추후에 문제가 발생하여도 빠른 대응이 어려울 것입니다.그래서 누가, 언제, 무슨코드를 어떻게 했느냐 하는 기록을 남기는(흔히 형상관리라고 합니다.) 도구를 “Git”이라고 부르고,그것을 웹페이지에서 볼 수 있도록 도와주는 서비스 중 하나가 “Github”입니다.참고로, Github이외에도 여러가지 서비스가 존재합니다. ex) GitHub, GitLab, BitBucket자 그렇다면 Github Blog는 무엇인가?Github에는 여러가지 파일이 업로드,저장이 이루어집니다. 그 중, 저장된 html파일 같은 웹 문서들을 Github에서 무료로 호스팅을 제공해주는 서비스가 존재합니다. 바로 Github Page입니다.이 Github Page를 이용하여 Blog를 만든것이 Github Blog(깃허브 블로그, 깃블로그)입니다.그렇기 때문에, 깃 블로그를 만들기 위해서는 Github 계정이 필요합니다.Github 계정이 없으신 분들은 Github으로 접속하여 계정생성(회원가입)을 먼저 진행해주시길 바랍니다.계정 생성은 어렵지 않기 때문에, 생략하도록 하겠습니다. 추후 필요시 내용 추가 하도록 하겠습니다.Step 1. Github Page 생성Step 1-1. 우선 본인의 Github계정(https://github.com/{username})으로 접속 후, 새로운 repository를 생성합니다. Step 1-2. repository생성Github Page는 사용자 페이지(단 1개) 와 프로젝트 페이지(여러개 가능) 으로 구성됩니다. 사용자 페이지는 https://username.github.io 와 같은 주소형식을 가집니다.프로젝트 페이지는 https://username.github.io/project_name 과 같은 주소 형식을 가집니다.위 두 가지는 비슷해 보이더라도, 차이가 아주 큽니다.저희는 사용자 페이지 주소형식을 사용할것입니다!고로 Owner는 변경하지 마시고, Repository name항목은 “username.github.io”를 입력합니다.저는 username이 wlqmffl0102이기 때문에Owner는 wlqmffl0102 / Repository name은 wlqmffl0102.github.io 으로 작성합니다.이후 선택지는 Public, Add a README file만 체크 후 나머지는 그대로 두시고 Create repository를 클릭합니다.Step 1-3. GitHub Page생성생성한 리포지토리로 이동 한 뒤, 상단 Settings를 클릭합니다.Settings 좌측 하단부에서 Page설정을 찾을 수 있습니다.Source항목을 아래 사진과 동일하게 맞춰주신 후 Save버튼을 누르면상단의 Your site is published at…이라는 초록색 부분을 볼 수 있습니다.해당 주소가 바로 GitHub Page입니다!접속이 되지 않는다면 5~10분정도 기다린 후 접속해보시면 접속이 될 것입니다.이 주소가 본인의 깃헙블로그 주소가 될 것입니다!사진과 같이 https://wlqmffl0102.github.io/로 보여지지 않고,https://wlqmffl0102.github.io/(Projectname)으로 보여진다면,사용자이름과 리포지토리명이 달라서 그렇습니다. 사용자 페이지가 아닌 프로젝트 페이지가 생성 된 것입니다. Step 1-2. repository생성에서 다시 확인하시길 바랍니다.Step 1-4. Github Desktop과 VSCode 설치Github Desktop과 VSCode를 설치합니다.사실 Github는 “Git을 다루는 능력” 또한 중요합니다. Git은 여러가지 명령어가 있고, 구조가 존재합니다. Github Page를 만들고는 싶은데, Git을 잘 사용할 줄 모르시는 분이시라면, commend line을 이용하기 보다는 Github Desktop을 추천해드립니다. 초보자도 쉽게 조작이 가능하기 때문이지요!그리고 VSCode란, Visual Studio Code의 약자로, MS사가 개발한 소스 코드 편집기 입니다.네. 각종 파일들을 편집하기 쉽도록 해주는 툴이지요.자, 이제 Github Desktop과 VSCode 설치를 완료했다면, 원격지에 있는 Github repository를 로컬과 Clone해줄것입니다!무슨 말이냐 하면, 인터넷 웹페이지에 어떠한 저장공간을 만들었어요(Repository). 그 저장공간에 있는 파일을 로컬(본인의 PC)로 가져오는것입니다!아직 잘 이해가 안 되실 수 있지만 시작해보겠습니다.우선, Github Desktop을 실행하여 Sign in to GitHub.com 버튼을 클릭 후, GitHub에 가입한 계정명(유저이름), 이메일을 작성 후 Continue -&amp;gt; Finish버튼을 순서대로 눌러줍니다.로그인이 정상적으로 되었다면, 이전 단계에서 생성한 “username.github.io” Repository가 화면에 보이실겁니다. 선택 후 하단 Clone.. 버튼을 클릭하여 진행하시면됩니다.이때, 보여지는 “Local path”라는 항목이 보이실건데요, 해당 경로의 폴더가 인터넷에 있는 repository와 연동되는 것 입니다.로그인이 정상적으로 되지 않으셨다면, 좌측상단의 File -&amp;gt; Options -&amp;gt; Accounts -&amp;gt; GitHub.com에서 Sign in버튼을 눌러 로그인을 진행가능합니다.또, Clone할 리포지토리가 제대로 보여지지 않거나 선택을 하지 못하였을 경우, 좌측상단의 File -&amp;gt; Clone a repository -&amp;gt; GitHub.com -&amp;gt; Your repositories에서 해당하는 repository 를 선택 후, 클론 해주시면 됩니다.Step 1-5. Github Desktop과 VSCode를 이용 해 보기자, 다 되어 갑니다!정상적으로 Github Desktop을 설치 후, repository clone을 하였다면, 아래와 같은 이미지를 확인 할 수 있습니다.여기서 Current repository에 “username.github.io”로 보이는지, Current branch에 “main”으로 보이는지 확인 후, 맞다면 Open the repository in your external editor항목의 Open in Visual Studio Code버튼을 누릅니다.그렇다면 Github Desktop이 실행 중인 채로 쨘 하고 VSCode가 실행되어 보이실텐데 Github Desktop은 그대로 두시고, VSCode의 좌측 탐색기 부분을 잘 봅시다.아마 “열려 있는 편집기”와 “username.github.io”가 보이실거예요.아무것도 파일을 작성한 것이 없어서, 아무런 파일이 보이지 않아야 정상이지만, 사실 저희가 repository를 만들때 하나의 파일을 생성했어요! 바로 “README.md”입니다! 잘 확인 되신다면 순조로워요~~자, 이제 여기에 홈페이지에 띄울 파일을 하나 작성해보도록 할게요.“username.github.io”에 마우스를 올리시면 파일을 추가 할 수 있습니다.index.html이라는 이름의 파일을 하나 생성해주시고, 내용은&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; Hello! This is the first page! &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;으로 작성 후 저장해주세요!그런 다음에, Github Desktop을 다시 열어 보시면, 좌측에 changes에 index.html파일이 보이고, 하단에는 Commit to main이라는 버튼이 활성화 되어 보일겁니다.그대로 버튼을 눌러주시면 아래와 같이 확인이 가능할것입니다!Push origin버튼을 눌러주시면, 완료된겁니다. (보너스) Github Desktop 사용방법Girhub Desktop의 사용법은 위와 같이 동일합니다. 좌측 상단 ‘Current repository’가 현재 사용하려고 하는 repository와 같은 이름인지 확인 바로 옆 ‘Current branch’또한 (대개)main이 맞는지 확인합니다.(브런치가 다르다면 브런치를 확인합니다!) 좌측부분에서 file들의 변경사항이 있다면 추가(초록), 수정(노랑), 삭제(빨강)로 확인이 가능합니다. file변경사항을 원격지 repository로 올리고 싶을때에는 수정사항이 올바른지 확인 후, 좌측 하단 Summary에서 Commit message를를 적은 뒤 ‘Commit to main’버튼을 누릅니다.(브런치가 다르다면 Commit to (브런치명)으로 확인됩니다.) Commit이 완료되었다면 화면 가운데 혹은 화면 상단에서 Push origin버튼을 눌러줍니다. 5~10분 뒤 github page로 생성된 주소로 들어가서 확인합니다. Step 1-6. Push확인 및 index.html접속해보기Github Desktop에서 push 후, Github홈페이지 -&amp;gt; “username.github.io” repository로 들어가 보시면,화면에는 README.md파일과, index.html파일이 확인된다면 정상적으로 Push가 완료된 것입니다.자, 이제 확인해봅시다.웹 브라우저 주소창에 http://username.github.io 를 기입하여 접속 해봅시다.화면에 “Hello! This is the first page!”라고 보인다면 완료되신것입니다.페이지가 정상적으로 보이지 않는다면 5~10분 후 재접속 해보시길 바랍니다.마무리어떠셨나요? 너무 어렵지는 않으셨으면 합니다.사담이 너무 많이 끼여서~ 게시글이 너무 길어진것 같아요! 정보전달을 더 깔끔하게 할 수 있도록 노력해보겠습니다.아직 재미있는 것들이 잔뜩 남았는데, 한 페이지로 다 보여드리지 못해서 죄송합니다.그치만 꾸준히 작성하겠습니다. 부디 도움이 되었으면 합니다.처음에도 말씀드렸지만 아직 미흡한 부분이 많습니다.미흡한 부분은 지적해주시고, 에러가 난다면 함께 고민 할 수 있으면 합니다.다들 끝까지 봐주셨으면 하는 바램이 있습니다. 그러니까 저도 끝까지 게시글을 쓰려고 합니다.포스팅은 계속됩니다. 감사합니다!다음 포스팅초보자를 위한 GitHub Blog 만들기 - 1초보자를 위한 GitHub Blog 만들기 - 2초보자를 위한 GitHub Blog 만들기 - 3초보자를 위한 GitHub Blog 만들기 - 4" }, { "title": "블로그 첫 포스팅", "url": "/posts/Blog-first-post/", "categories": "Blogging", "tags": "Blogging", "date": "2021-09-23 20:28:00 +0900", "snippet": "인사안녕하세요. Dodev | 하다입니다.첫 게시글 입니다! 반갑습니다. 앞으로 잘 부탁드려요.과거 이런저런 이유로 여러가지 블로그를 많이 접해봤습니다. 네이버, 티스토리, velog.. 그다지 무언가를 하기 위해서 사용했던것은 아니고, 그저 일기용으로 사용했었어요.그래서 그다지 사용하는데에 불편함은 없었지만, 자세히 보니 각각의 플랫폼은 특성이 다르더라구요. 그것을 깨닳았지만 블로그는 바꾸지 않았습니다. 불편함을 느끼지 못했거든요.그러다가, Github Page를 만나게 되었습니다.Github블로그(이하 깃 블로그)는 처음 사용합니다.되게 재미있더라구요. 그렇지만 일반인들이 바로바로 사용하기 어렵다는, 어느정도의 진입장벽이 있는 것으로 알고 있습니다.코드는 읽을 수 있지만 Jekyll의 디렉토리구조나, Ruby, liquid등.. 여러가지 연유로요. 그래서 저도 되게 헤맸어요.그럼에도 불구하고, 깃 블로그는 참 재미있습니다.깃 블로그를 만든 이유는 단 두 가지 입니다.“정보 제공”, “기록 관리”블로그는 제게 일기를 쓰기 위한 페이지에 불과했습니다. 타인에게 정보를 제공하고자 하는 글은 거의 처음이라, 최대한 느린 템포로 작성하려 합니다.미흡한 부분은 지적해주시고, 에러가 난다면 함께 고민 할 수 있으면 합니다.그런고로 언제든 덧글 달아주시거나, 연락주세요.감사합니다. 시작하겠습니다!" } ]
